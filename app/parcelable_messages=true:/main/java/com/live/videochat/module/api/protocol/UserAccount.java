// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: VCProto.proto at 83:1
package com.live.videochat.module.api.protocol;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

public final class UserAccount extends Message<UserAccount, UserAccount.Builder> {
  public static final ProtoAdapter<UserAccount> ADAPTER = new ProtoAdapter_UserAccount();

  private static final long serialVersionUID = 0L;

  public static final Boolean DEFAULT_ISVIP = false;

  public static final Long DEFAULT_GEMSBALANCE = 0L;

  public static final Long DEFAULT_TYCOONVALUE = 0L;

  public static final Integer DEFAULT_FREEMSGSBALANCE = 0;

  /**
   * 是否是vip
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean isVip;

  /**
   * 用户拥有的钻石;
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long gemsBalance;

  /**
   * 土豪值
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long tycoonValue;

  /**
   * 普通用户剩余免费消息条数
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer freeMsgsBalance;

  /**
   * 用户购买的表情包编号集合；
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#INT32",
      label = WireField.Label.REPEATED
  )
  public final List<Integer> purchasedEmojis;

  public UserAccount(Boolean isVip, Long gemsBalance, Long tycoonValue, Integer freeMsgsBalance, List<Integer> purchasedEmojis) {
    this(isVip, gemsBalance, tycoonValue, freeMsgsBalance, purchasedEmojis, ByteString.EMPTY);
  }

  public UserAccount(Boolean isVip, Long gemsBalance, Long tycoonValue, Integer freeMsgsBalance, List<Integer> purchasedEmojis, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.isVip = isVip;
    this.gemsBalance = gemsBalance;
    this.tycoonValue = tycoonValue;
    this.freeMsgsBalance = freeMsgsBalance;
    this.purchasedEmojis = Internal.immutableCopyOf("purchasedEmojis", purchasedEmojis);
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.isVip = isVip;
    builder.gemsBalance = gemsBalance;
    builder.tycoonValue = tycoonValue;
    builder.freeMsgsBalance = freeMsgsBalance;
    builder.purchasedEmojis = Internal.copyOf("purchasedEmojis", purchasedEmojis);
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof UserAccount)) return false;
    UserAccount o = (UserAccount) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(isVip, o.isVip)
        && Internal.equals(gemsBalance, o.gemsBalance)
        && Internal.equals(tycoonValue, o.tycoonValue)
        && Internal.equals(freeMsgsBalance, o.freeMsgsBalance)
        && purchasedEmojis.equals(o.purchasedEmojis);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (isVip != null ? isVip.hashCode() : 0);
      result = result * 37 + (gemsBalance != null ? gemsBalance.hashCode() : 0);
      result = result * 37 + (tycoonValue != null ? tycoonValue.hashCode() : 0);
      result = result * 37 + (freeMsgsBalance != null ? freeMsgsBalance.hashCode() : 0);
      result = result * 37 + purchasedEmojis.hashCode();
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (isVip != null) builder.append(", isVip=").append(isVip);
    if (gemsBalance != null) builder.append(", gemsBalance=").append(gemsBalance);
    if (tycoonValue != null) builder.append(", tycoonValue=").append(tycoonValue);
    if (freeMsgsBalance != null) builder.append(", freeMsgsBalance=").append(freeMsgsBalance);
    if (!purchasedEmojis.isEmpty()) builder.append(", purchasedEmojis=").append(purchasedEmojis);
    return builder.replace(0, 2, "UserAccount{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<UserAccount, Builder> {
    public Boolean isVip;

    public Long gemsBalance;

    public Long tycoonValue;

    public Integer freeMsgsBalance;

    public List<Integer> purchasedEmojis;

    public Builder() {
      purchasedEmojis = Internal.newMutableList();
    }

    /**
     * 是否是vip
     */
    public Builder isVip(Boolean isVip) {
      this.isVip = isVip;
      return this;
    }

    /**
     * 用户拥有的钻石;
     */
    public Builder gemsBalance(Long gemsBalance) {
      this.gemsBalance = gemsBalance;
      return this;
    }

    /**
     * 土豪值
     */
    public Builder tycoonValue(Long tycoonValue) {
      this.tycoonValue = tycoonValue;
      return this;
    }

    /**
     * 普通用户剩余免费消息条数
     */
    public Builder freeMsgsBalance(Integer freeMsgsBalance) {
      this.freeMsgsBalance = freeMsgsBalance;
      return this;
    }

    /**
     * 用户购买的表情包编号集合；
     */
    public Builder purchasedEmojis(List<Integer> purchasedEmojis) {
      Internal.checkElementsNotNull(purchasedEmojis);
      this.purchasedEmojis = purchasedEmojis;
      return this;
    }

    @Override
    public UserAccount build() {
      return new UserAccount(isVip, gemsBalance, tycoonValue, freeMsgsBalance, purchasedEmojis, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_UserAccount extends ProtoAdapter<UserAccount> {
    ProtoAdapter_UserAccount() {
      super(FieldEncoding.LENGTH_DELIMITED, UserAccount.class);
    }

    @Override
    public int encodedSize(UserAccount value) {
      return (value.isVip != null ? ProtoAdapter.BOOL.encodedSizeWithTag(1, value.isVip) : 0)
          + (value.gemsBalance != null ? ProtoAdapter.INT64.encodedSizeWithTag(2, value.gemsBalance) : 0)
          + (value.tycoonValue != null ? ProtoAdapter.INT64.encodedSizeWithTag(3, value.tycoonValue) : 0)
          + (value.freeMsgsBalance != null ? ProtoAdapter.INT32.encodedSizeWithTag(4, value.freeMsgsBalance) : 0)
          + ProtoAdapter.INT32.asRepeated().encodedSizeWithTag(5, value.purchasedEmojis)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, UserAccount value) throws IOException {
      if (value.isVip != null) ProtoAdapter.BOOL.encodeWithTag(writer, 1, value.isVip);
      if (value.gemsBalance != null) ProtoAdapter.INT64.encodeWithTag(writer, 2, value.gemsBalance);
      if (value.tycoonValue != null) ProtoAdapter.INT64.encodeWithTag(writer, 3, value.tycoonValue);
      if (value.freeMsgsBalance != null) ProtoAdapter.INT32.encodeWithTag(writer, 4, value.freeMsgsBalance);
      ProtoAdapter.INT32.asRepeated().encodeWithTag(writer, 5, value.purchasedEmojis);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public UserAccount decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.isVip(ProtoAdapter.BOOL.decode(reader)); break;
          case 2: builder.gemsBalance(ProtoAdapter.INT64.decode(reader)); break;
          case 3: builder.tycoonValue(ProtoAdapter.INT64.decode(reader)); break;
          case 4: builder.freeMsgsBalance(ProtoAdapter.INT32.decode(reader)); break;
          case 5: builder.purchasedEmojis.add(ProtoAdapter.INT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public UserAccount redact(UserAccount value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
