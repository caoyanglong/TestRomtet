// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: VCProto.proto at 383:1
package com.live.videochat.module.api.protocol;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class UserVCard extends Message<UserVCard, UserVCard.Builder> {
  public static final ProtoAdapter<UserVCard> ADAPTER = new ProtoAdapter_UserVCard();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_JID = "";

  public static final String DEFAULT_AVATARURL = "";

  public static final String DEFAULT_NICKNAME = "";

  public static final Boolean DEFAULT_ISVIP = false;

  public static final Integer DEFAULT_DAILYTYCOONS = 0;

  public static final Integer DEFAULT_WEEKLYTYCOONS = 0;

  public static final Integer DEFAULT_LATELYRECHARGEDGEMS = 0;

  public static final Long DEFAULT_LATELYRECHARGETIME = 0L;

  /**
   * 用户jid
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REQUIRED
  )
  public final String jid;

  /**
   * 用户头像
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String avatarUrl;

  /**
   * 用户昵称
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String nickName;

  /**
   * 是否是vip
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean isVip;

  /**
   * 日榜/周榜数据
   * 日土豪值
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer dailyTycoons;

  /**
   * 周土豪值
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer weeklyTycoons;

  /**
   * 最近充值列表数据
   * 最近充值的金币数
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer latelyRechargedGems;

  /**
   * 充值时间戳(最近付费用户列表按照充值时间排序)(单位:秒)
   */
  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long latelyRechargeTime;

  public UserVCard(String jid, String avatarUrl, String nickName, Boolean isVip, Integer dailyTycoons, Integer weeklyTycoons, Integer latelyRechargedGems, Long latelyRechargeTime) {
    this(jid, avatarUrl, nickName, isVip, dailyTycoons, weeklyTycoons, latelyRechargedGems, latelyRechargeTime, ByteString.EMPTY);
  }

  public UserVCard(String jid, String avatarUrl, String nickName, Boolean isVip, Integer dailyTycoons, Integer weeklyTycoons, Integer latelyRechargedGems, Long latelyRechargeTime, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.jid = jid;
    this.avatarUrl = avatarUrl;
    this.nickName = nickName;
    this.isVip = isVip;
    this.dailyTycoons = dailyTycoons;
    this.weeklyTycoons = weeklyTycoons;
    this.latelyRechargedGems = latelyRechargedGems;
    this.latelyRechargeTime = latelyRechargeTime;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.jid = jid;
    builder.avatarUrl = avatarUrl;
    builder.nickName = nickName;
    builder.isVip = isVip;
    builder.dailyTycoons = dailyTycoons;
    builder.weeklyTycoons = weeklyTycoons;
    builder.latelyRechargedGems = latelyRechargedGems;
    builder.latelyRechargeTime = latelyRechargeTime;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof UserVCard)) return false;
    UserVCard o = (UserVCard) other;
    return unknownFields().equals(o.unknownFields())
        && jid.equals(o.jid)
        && Internal.equals(avatarUrl, o.avatarUrl)
        && Internal.equals(nickName, o.nickName)
        && Internal.equals(isVip, o.isVip)
        && Internal.equals(dailyTycoons, o.dailyTycoons)
        && Internal.equals(weeklyTycoons, o.weeklyTycoons)
        && Internal.equals(latelyRechargedGems, o.latelyRechargedGems)
        && Internal.equals(latelyRechargeTime, o.latelyRechargeTime);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + jid.hashCode();
      result = result * 37 + (avatarUrl != null ? avatarUrl.hashCode() : 0);
      result = result * 37 + (nickName != null ? nickName.hashCode() : 0);
      result = result * 37 + (isVip != null ? isVip.hashCode() : 0);
      result = result * 37 + (dailyTycoons != null ? dailyTycoons.hashCode() : 0);
      result = result * 37 + (weeklyTycoons != null ? weeklyTycoons.hashCode() : 0);
      result = result * 37 + (latelyRechargedGems != null ? latelyRechargedGems.hashCode() : 0);
      result = result * 37 + (latelyRechargeTime != null ? latelyRechargeTime.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", jid=").append(jid);
    if (avatarUrl != null) builder.append(", avatarUrl=").append(avatarUrl);
    if (nickName != null) builder.append(", nickName=").append(nickName);
    if (isVip != null) builder.append(", isVip=").append(isVip);
    if (dailyTycoons != null) builder.append(", dailyTycoons=").append(dailyTycoons);
    if (weeklyTycoons != null) builder.append(", weeklyTycoons=").append(weeklyTycoons);
    if (latelyRechargedGems != null) builder.append(", latelyRechargedGems=").append(latelyRechargedGems);
    if (latelyRechargeTime != null) builder.append(", latelyRechargeTime=").append(latelyRechargeTime);
    return builder.replace(0, 2, "UserVCard{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<UserVCard, Builder> {
    public String jid;

    public String avatarUrl;

    public String nickName;

    public Boolean isVip;

    public Integer dailyTycoons;

    public Integer weeklyTycoons;

    public Integer latelyRechargedGems;

    public Long latelyRechargeTime;

    public Builder() {
    }

    /**
     * 用户jid
     */
    public Builder jid(String jid) {
      this.jid = jid;
      return this;
    }

    /**
     * 用户头像
     */
    public Builder avatarUrl(String avatarUrl) {
      this.avatarUrl = avatarUrl;
      return this;
    }

    /**
     * 用户昵称
     */
    public Builder nickName(String nickName) {
      this.nickName = nickName;
      return this;
    }

    /**
     * 是否是vip
     */
    public Builder isVip(Boolean isVip) {
      this.isVip = isVip;
      return this;
    }

    /**
     * 日榜/周榜数据
     * 日土豪值
     */
    public Builder dailyTycoons(Integer dailyTycoons) {
      this.dailyTycoons = dailyTycoons;
      return this;
    }

    /**
     * 周土豪值
     */
    public Builder weeklyTycoons(Integer weeklyTycoons) {
      this.weeklyTycoons = weeklyTycoons;
      return this;
    }

    /**
     * 最近充值列表数据
     * 最近充值的金币数
     */
    public Builder latelyRechargedGems(Integer latelyRechargedGems) {
      this.latelyRechargedGems = latelyRechargedGems;
      return this;
    }

    /**
     * 充值时间戳(最近付费用户列表按照充值时间排序)(单位:秒)
     */
    public Builder latelyRechargeTime(Long latelyRechargeTime) {
      this.latelyRechargeTime = latelyRechargeTime;
      return this;
    }

    @Override
    public UserVCard build() {
      if (jid == null) {
        throw Internal.missingRequiredFields(jid, "jid");
      }
      return new UserVCard(jid, avatarUrl, nickName, isVip, dailyTycoons, weeklyTycoons, latelyRechargedGems, latelyRechargeTime, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_UserVCard extends ProtoAdapter<UserVCard> {
    ProtoAdapter_UserVCard() {
      super(FieldEncoding.LENGTH_DELIMITED, UserVCard.class);
    }

    @Override
    public int encodedSize(UserVCard value) {
      return ProtoAdapter.STRING.encodedSizeWithTag(1, value.jid)
          + (value.avatarUrl != null ? ProtoAdapter.STRING.encodedSizeWithTag(2, value.avatarUrl) : 0)
          + (value.nickName != null ? ProtoAdapter.STRING.encodedSizeWithTag(3, value.nickName) : 0)
          + (value.isVip != null ? ProtoAdapter.BOOL.encodedSizeWithTag(4, value.isVip) : 0)
          + (value.dailyTycoons != null ? ProtoAdapter.INT32.encodedSizeWithTag(5, value.dailyTycoons) : 0)
          + (value.weeklyTycoons != null ? ProtoAdapter.INT32.encodedSizeWithTag(6, value.weeklyTycoons) : 0)
          + (value.latelyRechargedGems != null ? ProtoAdapter.INT32.encodedSizeWithTag(7, value.latelyRechargedGems) : 0)
          + (value.latelyRechargeTime != null ? ProtoAdapter.INT64.encodedSizeWithTag(8, value.latelyRechargeTime) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, UserVCard value) throws IOException {
      ProtoAdapter.STRING.encodeWithTag(writer, 1, value.jid);
      if (value.avatarUrl != null) ProtoAdapter.STRING.encodeWithTag(writer, 2, value.avatarUrl);
      if (value.nickName != null) ProtoAdapter.STRING.encodeWithTag(writer, 3, value.nickName);
      if (value.isVip != null) ProtoAdapter.BOOL.encodeWithTag(writer, 4, value.isVip);
      if (value.dailyTycoons != null) ProtoAdapter.INT32.encodeWithTag(writer, 5, value.dailyTycoons);
      if (value.weeklyTycoons != null) ProtoAdapter.INT32.encodeWithTag(writer, 6, value.weeklyTycoons);
      if (value.latelyRechargedGems != null) ProtoAdapter.INT32.encodeWithTag(writer, 7, value.latelyRechargedGems);
      if (value.latelyRechargeTime != null) ProtoAdapter.INT64.encodeWithTag(writer, 8, value.latelyRechargeTime);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public UserVCard decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.jid(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.avatarUrl(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.nickName(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.isVip(ProtoAdapter.BOOL.decode(reader)); break;
          case 5: builder.dailyTycoons(ProtoAdapter.INT32.decode(reader)); break;
          case 6: builder.weeklyTycoons(ProtoAdapter.INT32.decode(reader)); break;
          case 7: builder.latelyRechargedGems(ProtoAdapter.INT32.decode(reader)); break;
          case 8: builder.latelyRechargeTime(ProtoAdapter.INT64.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public UserVCard redact(UserVCard value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
