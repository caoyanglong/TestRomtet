// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: VCProto.proto at 183:1
package com.live.videochat.module.api.protocol;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class AutoReport extends Message<AutoReport, AutoReport.Builder> {
  public static final ProtoAdapter<AutoReport> ADAPTER = new ProtoAdapter_AutoReport();

  private static final long serialVersionUID = 0L;

  public static final Boolean DEFAULT_ENABLE = false;

  public static final Integer DEFAULT_QUALITY = 0;

  public static final Integer DEFAULT_INTERVAL = 0;

  /**
   * 是否开启，true:开启：false关闭
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL",
      label = WireField.Label.REQUIRED
  )
  public final Boolean enable;

  /**
   * 上传图片的质量（0-100），100为最好的图片质量。
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer quality;

  /**
   * 上传时间间隔(单位秒)
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer interval;

  public AutoReport(Boolean enable, Integer quality, Integer interval) {
    this(enable, quality, interval, ByteString.EMPTY);
  }

  public AutoReport(Boolean enable, Integer quality, Integer interval, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.enable = enable;
    this.quality = quality;
    this.interval = interval;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.enable = enable;
    builder.quality = quality;
    builder.interval = interval;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof AutoReport)) return false;
    AutoReport o = (AutoReport) other;
    return unknownFields().equals(o.unknownFields())
        && enable.equals(o.enable)
        && Internal.equals(quality, o.quality)
        && Internal.equals(interval, o.interval);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + enable.hashCode();
      result = result * 37 + (quality != null ? quality.hashCode() : 0);
      result = result * 37 + (interval != null ? interval.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", enable=").append(enable);
    if (quality != null) builder.append(", quality=").append(quality);
    if (interval != null) builder.append(", interval=").append(interval);
    return builder.replace(0, 2, "AutoReport{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<AutoReport, Builder> {
    public Boolean enable;

    public Integer quality;

    public Integer interval;

    public Builder() {
    }

    /**
     * 是否开启，true:开启：false关闭
     */
    public Builder enable(Boolean enable) {
      this.enable = enable;
      return this;
    }

    /**
     * 上传图片的质量（0-100），100为最好的图片质量。
     */
    public Builder quality(Integer quality) {
      this.quality = quality;
      return this;
    }

    /**
     * 上传时间间隔(单位秒)
     */
    public Builder interval(Integer interval) {
      this.interval = interval;
      return this;
    }

    @Override
    public AutoReport build() {
      if (enable == null) {
        throw Internal.missingRequiredFields(enable, "enable");
      }
      return new AutoReport(enable, quality, interval, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_AutoReport extends ProtoAdapter<AutoReport> {
    ProtoAdapter_AutoReport() {
      super(FieldEncoding.LENGTH_DELIMITED, AutoReport.class);
    }

    @Override
    public int encodedSize(AutoReport value) {
      return ProtoAdapter.BOOL.encodedSizeWithTag(1, value.enable)
          + (value.quality != null ? ProtoAdapter.INT32.encodedSizeWithTag(2, value.quality) : 0)
          + (value.interval != null ? ProtoAdapter.INT32.encodedSizeWithTag(3, value.interval) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, AutoReport value) throws IOException {
      ProtoAdapter.BOOL.encodeWithTag(writer, 1, value.enable);
      if (value.quality != null) ProtoAdapter.INT32.encodeWithTag(writer, 2, value.quality);
      if (value.interval != null) ProtoAdapter.INT32.encodeWithTag(writer, 3, value.interval);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public AutoReport decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.enable(ProtoAdapter.BOOL.decode(reader)); break;
          case 2: builder.quality(ProtoAdapter.INT32.decode(reader)); break;
          case 3: builder.interval(ProtoAdapter.INT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public AutoReport redact(AutoReport value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
