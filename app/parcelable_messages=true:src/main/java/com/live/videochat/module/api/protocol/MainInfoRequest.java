// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: VCProto.proto at 158:1
package com.live.videochat.module.api.protocol;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * ======================================================================================
 * 6.登录后拉取的主要信息
 * ======================================================================================
 */
public final class MainInfoRequest extends Message<MainInfoRequest, MainInfoRequest.Builder> {
  public static final ProtoAdapter<MainInfoRequest> ADAPTER = new ProtoAdapter_MainInfoRequest();

  private static final long serialVersionUID = 0L;

  /**
   * 客户端信息
   */
  @WireField(
      tag = 1,
      adapter = "com.live.videochat.module.api.protocol.ClientInfo#ADAPTER",
      label = WireField.Label.REQUIRED
  )
  public final ClientInfo clientInfo;

  /**
   * 设备信息
   */
  @WireField(
      tag = 2,
      adapter = "com.live.videochat.module.api.protocol.DeviceInfo#ADAPTER",
      label = WireField.Label.REQUIRED
  )
  public final DeviceInfo deviceInfo;

  /**
   * 验证登陆
   */
  @WireField(
      tag = 3,
      adapter = "com.live.videochat.module.api.protocol.UserInfo#ADAPTER"
  )
  public final UserInfo userInfo;

  public MainInfoRequest(ClientInfo clientInfo, DeviceInfo deviceInfo, UserInfo userInfo) {
    this(clientInfo, deviceInfo, userInfo, ByteString.EMPTY);
  }

  public MainInfoRequest(ClientInfo clientInfo, DeviceInfo deviceInfo, UserInfo userInfo, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.clientInfo = clientInfo;
    this.deviceInfo = deviceInfo;
    this.userInfo = userInfo;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.clientInfo = clientInfo;
    builder.deviceInfo = deviceInfo;
    builder.userInfo = userInfo;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof MainInfoRequest)) return false;
    MainInfoRequest o = (MainInfoRequest) other;
    return unknownFields().equals(o.unknownFields())
        && clientInfo.equals(o.clientInfo)
        && deviceInfo.equals(o.deviceInfo)
        && Internal.equals(userInfo, o.userInfo);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + clientInfo.hashCode();
      result = result * 37 + deviceInfo.hashCode();
      result = result * 37 + (userInfo != null ? userInfo.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", clientInfo=").append(clientInfo);
    builder.append(", deviceInfo=").append(deviceInfo);
    if (userInfo != null) builder.append(", userInfo=").append(userInfo);
    return builder.replace(0, 2, "MainInfoRequest{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<MainInfoRequest, Builder> {
    public ClientInfo clientInfo;

    public DeviceInfo deviceInfo;

    public UserInfo userInfo;

    public Builder() {
    }

    /**
     * 客户端信息
     */
    public Builder clientInfo(ClientInfo clientInfo) {
      this.clientInfo = clientInfo;
      return this;
    }

    /**
     * 设备信息
     */
    public Builder deviceInfo(DeviceInfo deviceInfo) {
      this.deviceInfo = deviceInfo;
      return this;
    }

    /**
     * 验证登陆
     */
    public Builder userInfo(UserInfo userInfo) {
      this.userInfo = userInfo;
      return this;
    }

    @Override
    public MainInfoRequest build() {
      if (clientInfo == null
          || deviceInfo == null) {
        throw Internal.missingRequiredFields(clientInfo, "clientInfo",
            deviceInfo, "deviceInfo");
      }
      return new MainInfoRequest(clientInfo, deviceInfo, userInfo, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_MainInfoRequest extends ProtoAdapter<MainInfoRequest> {
    ProtoAdapter_MainInfoRequest() {
      super(FieldEncoding.LENGTH_DELIMITED, MainInfoRequest.class);
    }

    @Override
    public int encodedSize(MainInfoRequest value) {
      return ClientInfo.ADAPTER.encodedSizeWithTag(1, value.clientInfo)
          + DeviceInfo.ADAPTER.encodedSizeWithTag(2, value.deviceInfo)
          + (value.userInfo != null ? UserInfo.ADAPTER.encodedSizeWithTag(3, value.userInfo) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, MainInfoRequest value) throws IOException {
      ClientInfo.ADAPTER.encodeWithTag(writer, 1, value.clientInfo);
      DeviceInfo.ADAPTER.encodeWithTag(writer, 2, value.deviceInfo);
      if (value.userInfo != null) UserInfo.ADAPTER.encodeWithTag(writer, 3, value.userInfo);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public MainInfoRequest decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.clientInfo(ClientInfo.ADAPTER.decode(reader)); break;
          case 2: builder.deviceInfo(DeviceInfo.ADAPTER.decode(reader)); break;
          case 3: builder.userInfo(UserInfo.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public MainInfoRequest redact(MainInfoRequest value) {
      Builder builder = value.newBuilder();
      builder.clientInfo = ClientInfo.ADAPTER.redact(builder.clientInfo);
      builder.deviceInfo = DeviceInfo.ADAPTER.redact(builder.deviceInfo);
      if (builder.userInfo != null) builder.userInfo = UserInfo.ADAPTER.redact(builder.userInfo);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
