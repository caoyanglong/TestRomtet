// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: VCProto.proto at 212:1
package com.live.videochat.module.api.protocol;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * 虚拟商品
 */
public final class VPBProp extends Message<VPBProp, VPBProp.Builder> {
  public static final ProtoAdapter<VPBProp> ADAPTER = new ProtoAdapter_VPBProp();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_ID = "";

  public static final String DEFAULT_TYPE = "";

  public static final Integer DEFAULT_GEMSPRICE = 0;

  public static final Integer DEFAULT_TABID = 0;

  public static final Integer DEFAULT_PRIORITY = 0;

  public static final Integer DEFAULT_OBTAINMETHOD = 0;

  public static final String DEFAULT_TITLE = "";

  public static final String DEFAULT_ICONURL = "";

  public static final String DEFAULT_ANIMATEURL = "";

  /**
   * 商品ID;
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REQUIRED
  )
  public final String id;

  /**
   * 商品类型, vir_inapp:需花费钻石购买的商品，可消耗型; vir_subs:需花费钻石订阅的商品，不可消耗;
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REQUIRED
  )
  public final String type;

  /**
   * 购买该商品的价格(单位：钻石数)
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#INT32",
      label = WireField.Label.REQUIRED
  )
  public final Integer gemsPrice;

  /**
   * 标签编号:从1开始，每种类型下又有多个标签；相同的tabId显示在同一个tab下。
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer tabId;

  /**
   * 商品优先级，0为最低优先级，用于商品排序
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer priority;

  /**
   * 获取方式:0:所有用户都可花费金币使用;1:vip用户才能花费金币使用
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer obtainMethod;

  /**
   * 商品名称;
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String title;

  /**
   * 商品缩略图（秀场打赏/提要求等场景）
   */
  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String iconUrl;

  /**
   * 商品素材下载地址
   */
  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String animateUrl;

  public VPBProp(String id, String type, Integer gemsPrice, Integer tabId, Integer priority, Integer obtainMethod, String title, String iconUrl, String animateUrl) {
    this(id, type, gemsPrice, tabId, priority, obtainMethod, title, iconUrl, animateUrl, ByteString.EMPTY);
  }

  public VPBProp(String id, String type, Integer gemsPrice, Integer tabId, Integer priority, Integer obtainMethod, String title, String iconUrl, String animateUrl, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.id = id;
    this.type = type;
    this.gemsPrice = gemsPrice;
    this.tabId = tabId;
    this.priority = priority;
    this.obtainMethod = obtainMethod;
    this.title = title;
    this.iconUrl = iconUrl;
    this.animateUrl = animateUrl;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.id = id;
    builder.type = type;
    builder.gemsPrice = gemsPrice;
    builder.tabId = tabId;
    builder.priority = priority;
    builder.obtainMethod = obtainMethod;
    builder.title = title;
    builder.iconUrl = iconUrl;
    builder.animateUrl = animateUrl;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof VPBProp)) return false;
    VPBProp o = (VPBProp) other;
    return unknownFields().equals(o.unknownFields())
        && id.equals(o.id)
        && type.equals(o.type)
        && gemsPrice.equals(o.gemsPrice)
        && Internal.equals(tabId, o.tabId)
        && Internal.equals(priority, o.priority)
        && Internal.equals(obtainMethod, o.obtainMethod)
        && Internal.equals(title, o.title)
        && Internal.equals(iconUrl, o.iconUrl)
        && Internal.equals(animateUrl, o.animateUrl);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + id.hashCode();
      result = result * 37 + type.hashCode();
      result = result * 37 + gemsPrice.hashCode();
      result = result * 37 + (tabId != null ? tabId.hashCode() : 0);
      result = result * 37 + (priority != null ? priority.hashCode() : 0);
      result = result * 37 + (obtainMethod != null ? obtainMethod.hashCode() : 0);
      result = result * 37 + (title != null ? title.hashCode() : 0);
      result = result * 37 + (iconUrl != null ? iconUrl.hashCode() : 0);
      result = result * 37 + (animateUrl != null ? animateUrl.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", id=").append(id);
    builder.append(", type=").append(type);
    builder.append(", gemsPrice=").append(gemsPrice);
    if (tabId != null) builder.append(", tabId=").append(tabId);
    if (priority != null) builder.append(", priority=").append(priority);
    if (obtainMethod != null) builder.append(", obtainMethod=").append(obtainMethod);
    if (title != null) builder.append(", title=").append(title);
    if (iconUrl != null) builder.append(", iconUrl=").append(iconUrl);
    if (animateUrl != null) builder.append(", animateUrl=").append(animateUrl);
    return builder.replace(0, 2, "VPBProp{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<VPBProp, Builder> {
    public String id;

    public String type;

    public Integer gemsPrice;

    public Integer tabId;

    public Integer priority;

    public Integer obtainMethod;

    public String title;

    public String iconUrl;

    public String animateUrl;

    public Builder() {
    }

    /**
     * 商品ID;
     */
    public Builder id(String id) {
      this.id = id;
      return this;
    }

    /**
     * 商品类型, vir_inapp:需花费钻石购买的商品，可消耗型; vir_subs:需花费钻石订阅的商品，不可消耗;
     */
    public Builder type(String type) {
      this.type = type;
      return this;
    }

    /**
     * 购买该商品的价格(单位：钻石数)
     */
    public Builder gemsPrice(Integer gemsPrice) {
      this.gemsPrice = gemsPrice;
      return this;
    }

    /**
     * 标签编号:从1开始，每种类型下又有多个标签；相同的tabId显示在同一个tab下。
     */
    public Builder tabId(Integer tabId) {
      this.tabId = tabId;
      return this;
    }

    /**
     * 商品优先级，0为最低优先级，用于商品排序
     */
    public Builder priority(Integer priority) {
      this.priority = priority;
      return this;
    }

    /**
     * 获取方式:0:所有用户都可花费金币使用;1:vip用户才能花费金币使用
     */
    public Builder obtainMethod(Integer obtainMethod) {
      this.obtainMethod = obtainMethod;
      return this;
    }

    /**
     * 商品名称;
     */
    public Builder title(String title) {
      this.title = title;
      return this;
    }

    /**
     * 商品缩略图（秀场打赏/提要求等场景）
     */
    public Builder iconUrl(String iconUrl) {
      this.iconUrl = iconUrl;
      return this;
    }

    /**
     * 商品素材下载地址
     */
    public Builder animateUrl(String animateUrl) {
      this.animateUrl = animateUrl;
      return this;
    }

    @Override
    public VPBProp build() {
      if (id == null
          || type == null
          || gemsPrice == null) {
        throw Internal.missingRequiredFields(id, "id",
            type, "type",
            gemsPrice, "gemsPrice");
      }
      return new VPBProp(id, type, gemsPrice, tabId, priority, obtainMethod, title, iconUrl, animateUrl, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_VPBProp extends ProtoAdapter<VPBProp> {
    ProtoAdapter_VPBProp() {
      super(FieldEncoding.LENGTH_DELIMITED, VPBProp.class);
    }

    @Override
    public int encodedSize(VPBProp value) {
      return ProtoAdapter.STRING.encodedSizeWithTag(1, value.id)
          + ProtoAdapter.STRING.encodedSizeWithTag(2, value.type)
          + ProtoAdapter.INT32.encodedSizeWithTag(3, value.gemsPrice)
          + (value.tabId != null ? ProtoAdapter.INT32.encodedSizeWithTag(4, value.tabId) : 0)
          + (value.priority != null ? ProtoAdapter.INT32.encodedSizeWithTag(5, value.priority) : 0)
          + (value.obtainMethod != null ? ProtoAdapter.INT32.encodedSizeWithTag(6, value.obtainMethod) : 0)
          + (value.title != null ? ProtoAdapter.STRING.encodedSizeWithTag(7, value.title) : 0)
          + (value.iconUrl != null ? ProtoAdapter.STRING.encodedSizeWithTag(8, value.iconUrl) : 0)
          + (value.animateUrl != null ? ProtoAdapter.STRING.encodedSizeWithTag(9, value.animateUrl) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, VPBProp value) throws IOException {
      ProtoAdapter.STRING.encodeWithTag(writer, 1, value.id);
      ProtoAdapter.STRING.encodeWithTag(writer, 2, value.type);
      ProtoAdapter.INT32.encodeWithTag(writer, 3, value.gemsPrice);
      if (value.tabId != null) ProtoAdapter.INT32.encodeWithTag(writer, 4, value.tabId);
      if (value.priority != null) ProtoAdapter.INT32.encodeWithTag(writer, 5, value.priority);
      if (value.obtainMethod != null) ProtoAdapter.INT32.encodeWithTag(writer, 6, value.obtainMethod);
      if (value.title != null) ProtoAdapter.STRING.encodeWithTag(writer, 7, value.title);
      if (value.iconUrl != null) ProtoAdapter.STRING.encodeWithTag(writer, 8, value.iconUrl);
      if (value.animateUrl != null) ProtoAdapter.STRING.encodeWithTag(writer, 9, value.animateUrl);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public VPBProp decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.id(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.type(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.gemsPrice(ProtoAdapter.INT32.decode(reader)); break;
          case 4: builder.tabId(ProtoAdapter.INT32.decode(reader)); break;
          case 5: builder.priority(ProtoAdapter.INT32.decode(reader)); break;
          case 6: builder.obtainMethod(ProtoAdapter.INT32.decode(reader)); break;
          case 7: builder.title(ProtoAdapter.STRING.decode(reader)); break;
          case 8: builder.iconUrl(ProtoAdapter.STRING.decode(reader)); break;
          case 9: builder.animateUrl(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public VPBProp redact(VPBProp value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
