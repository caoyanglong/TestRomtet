// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: VCProto.proto at 226:1
package com.live.videochat.module.api.protocol;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

/**
 * 虚拟商品
 */
public final class MaterialCategory extends Message<MaterialCategory, MaterialCategory.Builder> {
  public static final ProtoAdapter<MaterialCategory> ADAPTER = new ProtoAdapter_MaterialCategory();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_CATEGORYID = 0;

  public static final Integer DEFAULT_CATEGORYTYPE = 0;

  public static final String DEFAULT_CATEGORYNAME = "";

  public static final String DEFAULT_CATEGORYICON = "";

  public static final String DEFAULT_PACKAGEURL = "";

  public static final Integer DEFAULT_PRICE = 0;

  /**
   * 编号，从1开始，编号在前则显示在前面；
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#INT32",
      label = WireField.Label.REQUIRED
  )
  public final Integer categoryId;

  /**
   * 类型 0:贴纸；1：表情
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#INT32",
      label = WireField.Label.REQUIRED
  )
  public final Integer categoryType;

  /**
   * 分类名称
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String categoryName;

  /**
   * 分类icon地址
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String categoryIcon;

  /**
   * 表情包地址
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String packageUrl;

  /**
   * 表情包价格(单位：金币数)
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer price;

  /**
   * 素材资源
   */
  @WireField(
      tag = 7,
      adapter = "com.live.videochat.module.api.protocol.Material#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<Material> materials;

  public MaterialCategory(Integer categoryId, Integer categoryType, String categoryName, String categoryIcon, String packageUrl, Integer price, List<Material> materials) {
    this(categoryId, categoryType, categoryName, categoryIcon, packageUrl, price, materials, ByteString.EMPTY);
  }

  public MaterialCategory(Integer categoryId, Integer categoryType, String categoryName, String categoryIcon, String packageUrl, Integer price, List<Material> materials, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.categoryId = categoryId;
    this.categoryType = categoryType;
    this.categoryName = categoryName;
    this.categoryIcon = categoryIcon;
    this.packageUrl = packageUrl;
    this.price = price;
    this.materials = Internal.immutableCopyOf("materials", materials);
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.categoryId = categoryId;
    builder.categoryType = categoryType;
    builder.categoryName = categoryName;
    builder.categoryIcon = categoryIcon;
    builder.packageUrl = packageUrl;
    builder.price = price;
    builder.materials = Internal.copyOf("materials", materials);
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof MaterialCategory)) return false;
    MaterialCategory o = (MaterialCategory) other;
    return unknownFields().equals(o.unknownFields())
        && categoryId.equals(o.categoryId)
        && categoryType.equals(o.categoryType)
        && Internal.equals(categoryName, o.categoryName)
        && Internal.equals(categoryIcon, o.categoryIcon)
        && Internal.equals(packageUrl, o.packageUrl)
        && Internal.equals(price, o.price)
        && materials.equals(o.materials);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + categoryId.hashCode();
      result = result * 37 + categoryType.hashCode();
      result = result * 37 + (categoryName != null ? categoryName.hashCode() : 0);
      result = result * 37 + (categoryIcon != null ? categoryIcon.hashCode() : 0);
      result = result * 37 + (packageUrl != null ? packageUrl.hashCode() : 0);
      result = result * 37 + (price != null ? price.hashCode() : 0);
      result = result * 37 + materials.hashCode();
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", categoryId=").append(categoryId);
    builder.append(", categoryType=").append(categoryType);
    if (categoryName != null) builder.append(", categoryName=").append(categoryName);
    if (categoryIcon != null) builder.append(", categoryIcon=").append(categoryIcon);
    if (packageUrl != null) builder.append(", packageUrl=").append(packageUrl);
    if (price != null) builder.append(", price=").append(price);
    if (!materials.isEmpty()) builder.append(", materials=").append(materials);
    return builder.replace(0, 2, "MaterialCategory{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<MaterialCategory, Builder> {
    public Integer categoryId;

    public Integer categoryType;

    public String categoryName;

    public String categoryIcon;

    public String packageUrl;

    public Integer price;

    public List<Material> materials;

    public Builder() {
      materials = Internal.newMutableList();
    }

    /**
     * 编号，从1开始，编号在前则显示在前面；
     */
    public Builder categoryId(Integer categoryId) {
      this.categoryId = categoryId;
      return this;
    }

    /**
     * 类型 0:贴纸；1：表情
     */
    public Builder categoryType(Integer categoryType) {
      this.categoryType = categoryType;
      return this;
    }

    /**
     * 分类名称
     */
    public Builder categoryName(String categoryName) {
      this.categoryName = categoryName;
      return this;
    }

    /**
     * 分类icon地址
     */
    public Builder categoryIcon(String categoryIcon) {
      this.categoryIcon = categoryIcon;
      return this;
    }

    /**
     * 表情包地址
     */
    public Builder packageUrl(String packageUrl) {
      this.packageUrl = packageUrl;
      return this;
    }

    /**
     * 表情包价格(单位：金币数)
     */
    public Builder price(Integer price) {
      this.price = price;
      return this;
    }

    /**
     * 素材资源
     */
    public Builder materials(List<Material> materials) {
      Internal.checkElementsNotNull(materials);
      this.materials = materials;
      return this;
    }

    @Override
    public MaterialCategory build() {
      if (categoryId == null
          || categoryType == null) {
        throw Internal.missingRequiredFields(categoryId, "categoryId",
            categoryType, "categoryType");
      }
      return new MaterialCategory(categoryId, categoryType, categoryName, categoryIcon, packageUrl, price, materials, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_MaterialCategory extends ProtoAdapter<MaterialCategory> {
    ProtoAdapter_MaterialCategory() {
      super(FieldEncoding.LENGTH_DELIMITED, MaterialCategory.class);
    }

    @Override
    public int encodedSize(MaterialCategory value) {
      return ProtoAdapter.INT32.encodedSizeWithTag(1, value.categoryId)
          + ProtoAdapter.INT32.encodedSizeWithTag(2, value.categoryType)
          + (value.categoryName != null ? ProtoAdapter.STRING.encodedSizeWithTag(3, value.categoryName) : 0)
          + (value.categoryIcon != null ? ProtoAdapter.STRING.encodedSizeWithTag(4, value.categoryIcon) : 0)
          + (value.packageUrl != null ? ProtoAdapter.STRING.encodedSizeWithTag(5, value.packageUrl) : 0)
          + (value.price != null ? ProtoAdapter.INT32.encodedSizeWithTag(6, value.price) : 0)
          + Material.ADAPTER.asRepeated().encodedSizeWithTag(7, value.materials)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, MaterialCategory value) throws IOException {
      ProtoAdapter.INT32.encodeWithTag(writer, 1, value.categoryId);
      ProtoAdapter.INT32.encodeWithTag(writer, 2, value.categoryType);
      if (value.categoryName != null) ProtoAdapter.STRING.encodeWithTag(writer, 3, value.categoryName);
      if (value.categoryIcon != null) ProtoAdapter.STRING.encodeWithTag(writer, 4, value.categoryIcon);
      if (value.packageUrl != null) ProtoAdapter.STRING.encodeWithTag(writer, 5, value.packageUrl);
      if (value.price != null) ProtoAdapter.INT32.encodeWithTag(writer, 6, value.price);
      Material.ADAPTER.asRepeated().encodeWithTag(writer, 7, value.materials);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public MaterialCategory decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.categoryId(ProtoAdapter.INT32.decode(reader)); break;
          case 2: builder.categoryType(ProtoAdapter.INT32.decode(reader)); break;
          case 3: builder.categoryName(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.categoryIcon(ProtoAdapter.STRING.decode(reader)); break;
          case 5: builder.packageUrl(ProtoAdapter.STRING.decode(reader)); break;
          case 6: builder.price(ProtoAdapter.INT32.decode(reader)); break;
          case 7: builder.materials.add(Material.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public MaterialCategory redact(MaterialCategory value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.materials, Material.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
