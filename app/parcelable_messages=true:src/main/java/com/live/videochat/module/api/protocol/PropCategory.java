// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: VCProto.proto at 205:1
package com.live.videochat.module.api.protocol;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

/**
 * 虚拟商品
 */
public final class PropCategory extends Message<PropCategory, PropCategory.Builder> {
  public static final ProtoAdapter<PropCategory> ADAPTER = new ProtoAdapter_PropCategory();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_CATEGORYID = 0;

  public static final String DEFAULT_CATEGORYNAME = "";

  /**
   * 编号，从1开始，编号在前则显示在前面；
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#INT32",
      label = WireField.Label.REQUIRED
  )
  public final Integer categoryId;

  /**
   * 分类名称
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REQUIRED
  )
  public final String categoryName;

  /**
   * 虚拟商品
   */
  @WireField(
      tag = 3,
      adapter = "com.live.videochat.module.api.protocol.VPBProp#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<VPBProp> vpbProps;

  public PropCategory(Integer categoryId, String categoryName, List<VPBProp> vpbProps) {
    this(categoryId, categoryName, vpbProps, ByteString.EMPTY);
  }

  public PropCategory(Integer categoryId, String categoryName, List<VPBProp> vpbProps, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.categoryId = categoryId;
    this.categoryName = categoryName;
    this.vpbProps = Internal.immutableCopyOf("vpbProps", vpbProps);
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.categoryId = categoryId;
    builder.categoryName = categoryName;
    builder.vpbProps = Internal.copyOf("vpbProps", vpbProps);
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof PropCategory)) return false;
    PropCategory o = (PropCategory) other;
    return unknownFields().equals(o.unknownFields())
        && categoryId.equals(o.categoryId)
        && categoryName.equals(o.categoryName)
        && vpbProps.equals(o.vpbProps);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + categoryId.hashCode();
      result = result * 37 + categoryName.hashCode();
      result = result * 37 + vpbProps.hashCode();
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", categoryId=").append(categoryId);
    builder.append(", categoryName=").append(categoryName);
    if (!vpbProps.isEmpty()) builder.append(", vpbProps=").append(vpbProps);
    return builder.replace(0, 2, "PropCategory{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<PropCategory, Builder> {
    public Integer categoryId;

    public String categoryName;

    public List<VPBProp> vpbProps;

    public Builder() {
      vpbProps = Internal.newMutableList();
    }

    /**
     * 编号，从1开始，编号在前则显示在前面；
     */
    public Builder categoryId(Integer categoryId) {
      this.categoryId = categoryId;
      return this;
    }

    /**
     * 分类名称
     */
    public Builder categoryName(String categoryName) {
      this.categoryName = categoryName;
      return this;
    }

    /**
     * 虚拟商品
     */
    public Builder vpbProps(List<VPBProp> vpbProps) {
      Internal.checkElementsNotNull(vpbProps);
      this.vpbProps = vpbProps;
      return this;
    }

    @Override
    public PropCategory build() {
      if (categoryId == null
          || categoryName == null) {
        throw Internal.missingRequiredFields(categoryId, "categoryId",
            categoryName, "categoryName");
      }
      return new PropCategory(categoryId, categoryName, vpbProps, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_PropCategory extends ProtoAdapter<PropCategory> {
    ProtoAdapter_PropCategory() {
      super(FieldEncoding.LENGTH_DELIMITED, PropCategory.class);
    }

    @Override
    public int encodedSize(PropCategory value) {
      return ProtoAdapter.INT32.encodedSizeWithTag(1, value.categoryId)
          + ProtoAdapter.STRING.encodedSizeWithTag(2, value.categoryName)
          + VPBProp.ADAPTER.asRepeated().encodedSizeWithTag(3, value.vpbProps)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, PropCategory value) throws IOException {
      ProtoAdapter.INT32.encodeWithTag(writer, 1, value.categoryId);
      ProtoAdapter.STRING.encodeWithTag(writer, 2, value.categoryName);
      VPBProp.ADAPTER.asRepeated().encodeWithTag(writer, 3, value.vpbProps);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public PropCategory decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.categoryId(ProtoAdapter.INT32.decode(reader)); break;
          case 2: builder.categoryName(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.vpbProps.add(VPBProp.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public PropCategory redact(PropCategory value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.vpbProps, VPBProp.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
