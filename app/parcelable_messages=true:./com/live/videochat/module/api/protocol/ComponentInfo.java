// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: VCProto.proto at 250:1
package com.live.videochat.module.api.protocol;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * xmpp服务各组件信息
 */
public final class ComponentInfo extends Message<ComponentInfo, ComponentInfo.Builder> {
  public static final ProtoAdapter<ComponentInfo> ADAPTER = new ProtoAdapter_ComponentInfo();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_HUBDOMAIN = "";

  public static final String DEFAULT_PUSHDOMAIN = "";

  public static final String DEFAULT_FOLLOWDOMAIN = "";

  public static final String DEFAULT_REPORTDOMAIN = "";

  public static final String DEFAULT_UPLOADDOMAIN = "";

  public static final String DEFAULT_HELPDOMAIN = "";

  public static final String DEFAULT_ANCHORLISTDOMAIN = "";

  public static final String DEFAULT_ANCHORVIDEODOMAIN = "";

  public static final String DEFAULT_CENTERPUBSUBDOMAIN = "";

  public static final String DEFAULT_HELPNODE = "";

  /**
   * 视频组件域名
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REQUIRED
  )
  public final String hubDomain;

  /**
   * push视频组件域名
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REQUIRED
  )
  public final String pushDomain;

  /**
   * 关注组件域名
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REQUIRED
  )
  public final String followDomain;

  /**
   * 举报视频组件域名
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REQUIRED
  )
  public final String reportDomain;

  /**
   * 文件上传域名
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REQUIRED
  )
  public final String uploadDomain;

  /**
   * 客服域名
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REQUIRED
  )
  public final String helpDomain;

  /**
   * 主播列表域名
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REQUIRED
  )
  public final String anchorlistDomain;

  /**
   * 主播视频域名
   */
  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REQUIRED
  )
  public final String anchorvideoDomain;

  /**
   * 中心pubsub域名
   */
  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String centerPubsubDomain;

  /**
   * 客户端需要订阅的通知节点,服务端通过该节点向客户端下发官方通知。
   */
  @WireField(
      tag = 10,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String helpNode;

  public ComponentInfo(String hubDomain, String pushDomain, String followDomain, String reportDomain, String uploadDomain, String helpDomain, String anchorlistDomain, String anchorvideoDomain, String centerPubsubDomain, String helpNode) {
    this(hubDomain, pushDomain, followDomain, reportDomain, uploadDomain, helpDomain, anchorlistDomain, anchorvideoDomain, centerPubsubDomain, helpNode, ByteString.EMPTY);
  }

  public ComponentInfo(String hubDomain, String pushDomain, String followDomain, String reportDomain, String uploadDomain, String helpDomain, String anchorlistDomain, String anchorvideoDomain, String centerPubsubDomain, String helpNode, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.hubDomain = hubDomain;
    this.pushDomain = pushDomain;
    this.followDomain = followDomain;
    this.reportDomain = reportDomain;
    this.uploadDomain = uploadDomain;
    this.helpDomain = helpDomain;
    this.anchorlistDomain = anchorlistDomain;
    this.anchorvideoDomain = anchorvideoDomain;
    this.centerPubsubDomain = centerPubsubDomain;
    this.helpNode = helpNode;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.hubDomain = hubDomain;
    builder.pushDomain = pushDomain;
    builder.followDomain = followDomain;
    builder.reportDomain = reportDomain;
    builder.uploadDomain = uploadDomain;
    builder.helpDomain = helpDomain;
    builder.anchorlistDomain = anchorlistDomain;
    builder.anchorvideoDomain = anchorvideoDomain;
    builder.centerPubsubDomain = centerPubsubDomain;
    builder.helpNode = helpNode;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof ComponentInfo)) return false;
    ComponentInfo o = (ComponentInfo) other;
    return unknownFields().equals(o.unknownFields())
        && hubDomain.equals(o.hubDomain)
        && pushDomain.equals(o.pushDomain)
        && followDomain.equals(o.followDomain)
        && reportDomain.equals(o.reportDomain)
        && uploadDomain.equals(o.uploadDomain)
        && helpDomain.equals(o.helpDomain)
        && anchorlistDomain.equals(o.anchorlistDomain)
        && anchorvideoDomain.equals(o.anchorvideoDomain)
        && Internal.equals(centerPubsubDomain, o.centerPubsubDomain)
        && Internal.equals(helpNode, o.helpNode);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + hubDomain.hashCode();
      result = result * 37 + pushDomain.hashCode();
      result = result * 37 + followDomain.hashCode();
      result = result * 37 + reportDomain.hashCode();
      result = result * 37 + uploadDomain.hashCode();
      result = result * 37 + helpDomain.hashCode();
      result = result * 37 + anchorlistDomain.hashCode();
      result = result * 37 + anchorvideoDomain.hashCode();
      result = result * 37 + (centerPubsubDomain != null ? centerPubsubDomain.hashCode() : 0);
      result = result * 37 + (helpNode != null ? helpNode.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", hubDomain=").append(hubDomain);
    builder.append(", pushDomain=").append(pushDomain);
    builder.append(", followDomain=").append(followDomain);
    builder.append(", reportDomain=").append(reportDomain);
    builder.append(", uploadDomain=").append(uploadDomain);
    builder.append(", helpDomain=").append(helpDomain);
    builder.append(", anchorlistDomain=").append(anchorlistDomain);
    builder.append(", anchorvideoDomain=").append(anchorvideoDomain);
    if (centerPubsubDomain != null) builder.append(", centerPubsubDomain=").append(centerPubsubDomain);
    if (helpNode != null) builder.append(", helpNode=").append(helpNode);
    return builder.replace(0, 2, "ComponentInfo{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<ComponentInfo, Builder> {
    public String hubDomain;

    public String pushDomain;

    public String followDomain;

    public String reportDomain;

    public String uploadDomain;

    public String helpDomain;

    public String anchorlistDomain;

    public String anchorvideoDomain;

    public String centerPubsubDomain;

    public String helpNode;

    public Builder() {
    }

    /**
     * 视频组件域名
     */
    public Builder hubDomain(String hubDomain) {
      this.hubDomain = hubDomain;
      return this;
    }

    /**
     * push视频组件域名
     */
    public Builder pushDomain(String pushDomain) {
      this.pushDomain = pushDomain;
      return this;
    }

    /**
     * 关注组件域名
     */
    public Builder followDomain(String followDomain) {
      this.followDomain = followDomain;
      return this;
    }

    /**
     * 举报视频组件域名
     */
    public Builder reportDomain(String reportDomain) {
      this.reportDomain = reportDomain;
      return this;
    }

    /**
     * 文件上传域名
     */
    public Builder uploadDomain(String uploadDomain) {
      this.uploadDomain = uploadDomain;
      return this;
    }

    /**
     * 客服域名
     */
    public Builder helpDomain(String helpDomain) {
      this.helpDomain = helpDomain;
      return this;
    }

    /**
     * 主播列表域名
     */
    public Builder anchorlistDomain(String anchorlistDomain) {
      this.anchorlistDomain = anchorlistDomain;
      return this;
    }

    /**
     * 主播视频域名
     */
    public Builder anchorvideoDomain(String anchorvideoDomain) {
      this.anchorvideoDomain = anchorvideoDomain;
      return this;
    }

    /**
     * 中心pubsub域名
     */
    public Builder centerPubsubDomain(String centerPubsubDomain) {
      this.centerPubsubDomain = centerPubsubDomain;
      return this;
    }

    /**
     * 客户端需要订阅的通知节点,服务端通过该节点向客户端下发官方通知。
     */
    public Builder helpNode(String helpNode) {
      this.helpNode = helpNode;
      return this;
    }

    @Override
    public ComponentInfo build() {
      if (hubDomain == null
          || pushDomain == null
          || followDomain == null
          || reportDomain == null
          || uploadDomain == null
          || helpDomain == null
          || anchorlistDomain == null
          || anchorvideoDomain == null) {
        throw Internal.missingRequiredFields(hubDomain, "hubDomain",
            pushDomain, "pushDomain",
            followDomain, "followDomain",
            reportDomain, "reportDomain",
            uploadDomain, "uploadDomain",
            helpDomain, "helpDomain",
            anchorlistDomain, "anchorlistDomain",
            anchorvideoDomain, "anchorvideoDomain");
      }
      return new ComponentInfo(hubDomain, pushDomain, followDomain, reportDomain, uploadDomain, helpDomain, anchorlistDomain, anchorvideoDomain, centerPubsubDomain, helpNode, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_ComponentInfo extends ProtoAdapter<ComponentInfo> {
    ProtoAdapter_ComponentInfo() {
      super(FieldEncoding.LENGTH_DELIMITED, ComponentInfo.class);
    }

    @Override
    public int encodedSize(ComponentInfo value) {
      return ProtoAdapter.STRING.encodedSizeWithTag(1, value.hubDomain)
          + ProtoAdapter.STRING.encodedSizeWithTag(2, value.pushDomain)
          + ProtoAdapter.STRING.encodedSizeWithTag(3, value.followDomain)
          + ProtoAdapter.STRING.encodedSizeWithTag(4, value.reportDomain)
          + ProtoAdapter.STRING.encodedSizeWithTag(5, value.uploadDomain)
          + ProtoAdapter.STRING.encodedSizeWithTag(6, value.helpDomain)
          + ProtoAdapter.STRING.encodedSizeWithTag(7, value.anchorlistDomain)
          + ProtoAdapter.STRING.encodedSizeWithTag(8, value.anchorvideoDomain)
          + (value.centerPubsubDomain != null ? ProtoAdapter.STRING.encodedSizeWithTag(9, value.centerPubsubDomain) : 0)
          + (value.helpNode != null ? ProtoAdapter.STRING.encodedSizeWithTag(10, value.helpNode) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, ComponentInfo value) throws IOException {
      ProtoAdapter.STRING.encodeWithTag(writer, 1, value.hubDomain);
      ProtoAdapter.STRING.encodeWithTag(writer, 2, value.pushDomain);
      ProtoAdapter.STRING.encodeWithTag(writer, 3, value.followDomain);
      ProtoAdapter.STRING.encodeWithTag(writer, 4, value.reportDomain);
      ProtoAdapter.STRING.encodeWithTag(writer, 5, value.uploadDomain);
      ProtoAdapter.STRING.encodeWithTag(writer, 6, value.helpDomain);
      ProtoAdapter.STRING.encodeWithTag(writer, 7, value.anchorlistDomain);
      ProtoAdapter.STRING.encodeWithTag(writer, 8, value.anchorvideoDomain);
      if (value.centerPubsubDomain != null) ProtoAdapter.STRING.encodeWithTag(writer, 9, value.centerPubsubDomain);
      if (value.helpNode != null) ProtoAdapter.STRING.encodeWithTag(writer, 10, value.helpNode);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public ComponentInfo decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.hubDomain(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.pushDomain(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.followDomain(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.reportDomain(ProtoAdapter.STRING.decode(reader)); break;
          case 5: builder.uploadDomain(ProtoAdapter.STRING.decode(reader)); break;
          case 6: builder.helpDomain(ProtoAdapter.STRING.decode(reader)); break;
          case 7: builder.anchorlistDomain(ProtoAdapter.STRING.decode(reader)); break;
          case 8: builder.anchorvideoDomain(ProtoAdapter.STRING.decode(reader)); break;
          case 9: builder.centerPubsubDomain(ProtoAdapter.STRING.decode(reader)); break;
          case 10: builder.helpNode(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public ComponentInfo redact(ComponentInfo value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
