// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: VCProto.proto at 124:1
package com.live.videochat.module.api.protocol;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * ======================================================================================
 * 4.检测注册接口
 * ======================================================================================
 * 请求
 */
public final class CheckRegisterRequest extends Message<CheckRegisterRequest, CheckRegisterRequest.Builder> {
  public static final ProtoAdapter<CheckRegisterRequest> ADAPTER = new ProtoAdapter_CheckRegisterRequest();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_OPENID = "";

  public static final String DEFAULT_TOKEN = "";

  public static final Integer DEFAULT_CHANNEL = 0;

  /**
   * 客户端信息
   */
  @WireField(
      tag = 1,
      adapter = "com.live.videochat.module.api.protocol.ClientInfo#ADAPTER",
      label = WireField.Label.REQUIRED
  )
  public final ClientInfo clientInfo;

  /**
   * 设备信息
   */
  @WireField(
      tag = 2,
      adapter = "com.live.videochat.module.api.protocol.DeviceInfo#ADAPTER",
      label = WireField.Label.REQUIRED
  )
  public final DeviceInfo deviceInfo;

  /**
   * Google提供的第三方认证凭证
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REQUIRED
  )
  public final String openId;

  /**
   * google...用户访问口令
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REQUIRED
  )
  public final String token;

  /**
   * 登录渠道 1:facebook; 2:google; 3:phone number；4.游客
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#INT32",
      label = WireField.Label.REQUIRED
  )
  public final Integer channel;

  public CheckRegisterRequest(ClientInfo clientInfo, DeviceInfo deviceInfo, String openId, String token, Integer channel) {
    this(clientInfo, deviceInfo, openId, token, channel, ByteString.EMPTY);
  }

  public CheckRegisterRequest(ClientInfo clientInfo, DeviceInfo deviceInfo, String openId, String token, Integer channel, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.clientInfo = clientInfo;
    this.deviceInfo = deviceInfo;
    this.openId = openId;
    this.token = token;
    this.channel = channel;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.clientInfo = clientInfo;
    builder.deviceInfo = deviceInfo;
    builder.openId = openId;
    builder.token = token;
    builder.channel = channel;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof CheckRegisterRequest)) return false;
    CheckRegisterRequest o = (CheckRegisterRequest) other;
    return unknownFields().equals(o.unknownFields())
        && clientInfo.equals(o.clientInfo)
        && deviceInfo.equals(o.deviceInfo)
        && openId.equals(o.openId)
        && token.equals(o.token)
        && channel.equals(o.channel);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + clientInfo.hashCode();
      result = result * 37 + deviceInfo.hashCode();
      result = result * 37 + openId.hashCode();
      result = result * 37 + token.hashCode();
      result = result * 37 + channel.hashCode();
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", clientInfo=").append(clientInfo);
    builder.append(", deviceInfo=").append(deviceInfo);
    builder.append(", openId=").append(openId);
    builder.append(", token=").append(token);
    builder.append(", channel=").append(channel);
    return builder.replace(0, 2, "CheckRegisterRequest{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<CheckRegisterRequest, Builder> {
    public ClientInfo clientInfo;

    public DeviceInfo deviceInfo;

    public String openId;

    public String token;

    public Integer channel;

    public Builder() {
    }

    /**
     * 客户端信息
     */
    public Builder clientInfo(ClientInfo clientInfo) {
      this.clientInfo = clientInfo;
      return this;
    }

    /**
     * 设备信息
     */
    public Builder deviceInfo(DeviceInfo deviceInfo) {
      this.deviceInfo = deviceInfo;
      return this;
    }

    /**
     * Google提供的第三方认证凭证
     */
    public Builder openId(String openId) {
      this.openId = openId;
      return this;
    }

    /**
     * google...用户访问口令
     */
    public Builder token(String token) {
      this.token = token;
      return this;
    }

    /**
     * 登录渠道 1:facebook; 2:google; 3:phone number；4.游客
     */
    public Builder channel(Integer channel) {
      this.channel = channel;
      return this;
    }

    @Override
    public CheckRegisterRequest build() {
      if (clientInfo == null
          || deviceInfo == null
          || openId == null
          || token == null
          || channel == null) {
        throw Internal.missingRequiredFields(clientInfo, "clientInfo",
            deviceInfo, "deviceInfo",
            openId, "openId",
            token, "token",
            channel, "channel");
      }
      return new CheckRegisterRequest(clientInfo, deviceInfo, openId, token, channel, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_CheckRegisterRequest extends ProtoAdapter<CheckRegisterRequest> {
    ProtoAdapter_CheckRegisterRequest() {
      super(FieldEncoding.LENGTH_DELIMITED, CheckRegisterRequest.class);
    }

    @Override
    public int encodedSize(CheckRegisterRequest value) {
      return ClientInfo.ADAPTER.encodedSizeWithTag(1, value.clientInfo)
          + DeviceInfo.ADAPTER.encodedSizeWithTag(2, value.deviceInfo)
          + ProtoAdapter.STRING.encodedSizeWithTag(3, value.openId)
          + ProtoAdapter.STRING.encodedSizeWithTag(4, value.token)
          + ProtoAdapter.INT32.encodedSizeWithTag(5, value.channel)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, CheckRegisterRequest value) throws IOException {
      ClientInfo.ADAPTER.encodeWithTag(writer, 1, value.clientInfo);
      DeviceInfo.ADAPTER.encodeWithTag(writer, 2, value.deviceInfo);
      ProtoAdapter.STRING.encodeWithTag(writer, 3, value.openId);
      ProtoAdapter.STRING.encodeWithTag(writer, 4, value.token);
      ProtoAdapter.INT32.encodeWithTag(writer, 5, value.channel);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public CheckRegisterRequest decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.clientInfo(ClientInfo.ADAPTER.decode(reader)); break;
          case 2: builder.deviceInfo(DeviceInfo.ADAPTER.decode(reader)); break;
          case 3: builder.openId(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.token(ProtoAdapter.STRING.decode(reader)); break;
          case 5: builder.channel(ProtoAdapter.INT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public CheckRegisterRequest redact(CheckRegisterRequest value) {
      Builder builder = value.newBuilder();
      builder.clientInfo = ClientInfo.ADAPTER.redact(builder.clientInfo);
      builder.deviceInfo = DeviceInfo.ADAPTER.redact(builder.deviceInfo);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
