// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: VCProto.proto at 40:1
package com.live.videochat.module.api.protocol;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * 设备信息
 */
public final class DeviceInfo extends Message<DeviceInfo, DeviceInfo.Builder> {
  public static final ProtoAdapter<DeviceInfo> ADAPTER = new ProtoAdapter_DeviceInfo();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_OSNAME = "";

  public static final String DEFAULT_DEVICECOUNTRY = "";

  public static final String DEFAULT_LOCALLANGUAGE = "";

  public static final String DEFAULT_NETWORKCOUNTRY = "";

  public static final String DEFAULT_CONFIGLANGUAGE = "";

  public static final String DEFAULT_OSVERSION = "";

  public static final String DEFAULT_DEVICEVENDOR = "";

  public static final String DEFAULT_DEVICEMODEL = "";

  public static final String DEFAULT_FINGERPRINT = "";

  public static final String DEFAULT_DEVICEFAMILY = "";

  public static final String DEFAULT_CARRIER = "";

  public static final String DEFAULT_IMEI = "";

  public static final String DEFAULT_ANDROIDID = "";

  public static final Integer DEFAULT_SDKINT = 0;

  public static final String DEFAULT_GAID = "";

  public static final String DEFAULT_IDFA = "";

  public static final String DEFAULT_IDFV = "";

  public static final String DEFAULT_TIMEZONEID = "";

  public static final Integer DEFAULT_TIMEZONEOFFSET = 0;

  /**
   * ios/android，标示客户端类型:
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REQUIRED
  )
  public final String osName;

  /**
   * 本机设备：CN、US、CA……
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REQUIRED
  )
  public final String deviceCountry;

  /**
   * 本机设备：CN、US、CA……
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REQUIRED
  )
  public final String localLanguage;

  /**
   * 本机设备：CN、US、CA……
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REQUIRED
  )
  public final String networkCountry;

  /**
   * 本机设备：CN、US、CA……
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REQUIRED
  )
  public final String configLanguage;

  /**
   * 9.0/6.0
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String osVersion;

  /**
   * 本机设备：供应商
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String deviceVendor;

  /**
   * 本机设备：型号:iphone 6s/LGE
   */
  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String deviceModel;

  /**
   * 本机设备：指纹
   */
  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String fingerprint;

  /**
   * ipad
   */
  @WireField(
      tag = 10,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String deviceFamily;

  /**
   * china mobile
   */
  @WireField(
      tag = 11,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String carrier;

  /**
   * sha1(imei)(android必有)
   */
  @WireField(
      tag = 12,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String imei;

  /**
   * 本机设备：androidId(没有的androidId时候,hash(imei))(android必有)
   */
  @WireField(
      tag = 13,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String androidId;

  /**
   * 本机设备：SDK版本信息(android仅有)
   */
  @WireField(
      tag = 14,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer sdkInt;

  @WireField(
      tag = 15,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String gaid;

  /**
   * 00000000-0000-0000-0000-000000000000(ios 仅有)
   */
  @WireField(
      tag = 16,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String idfa;

  /**
   * idfvXXXXXXX(ios 必有)
   */
  @WireField(
      tag = 17,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String idfv;

  /**
   * 时区id
   */
  @WireField(
      tag = 18,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REQUIRED
  )
  public final String timezoneId;

  /**
   * 时区相对GMT偏移值
   */
  @WireField(
      tag = 19,
      adapter = "com.squareup.wire.ProtoAdapter#INT32",
      label = WireField.Label.REQUIRED
  )
  public final Integer timezoneOffset;

  public DeviceInfo(String osName, String deviceCountry, String localLanguage, String networkCountry, String configLanguage, String osVersion, String deviceVendor, String deviceModel, String fingerprint, String deviceFamily, String carrier, String imei, String androidId, Integer sdkInt, String gaid, String idfa, String idfv, String timezoneId, Integer timezoneOffset) {
    this(osName, deviceCountry, localLanguage, networkCountry, configLanguage, osVersion, deviceVendor, deviceModel, fingerprint, deviceFamily, carrier, imei, androidId, sdkInt, gaid, idfa, idfv, timezoneId, timezoneOffset, ByteString.EMPTY);
  }

  public DeviceInfo(String osName, String deviceCountry, String localLanguage, String networkCountry, String configLanguage, String osVersion, String deviceVendor, String deviceModel, String fingerprint, String deviceFamily, String carrier, String imei, String androidId, Integer sdkInt, String gaid, String idfa, String idfv, String timezoneId, Integer timezoneOffset, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.osName = osName;
    this.deviceCountry = deviceCountry;
    this.localLanguage = localLanguage;
    this.networkCountry = networkCountry;
    this.configLanguage = configLanguage;
    this.osVersion = osVersion;
    this.deviceVendor = deviceVendor;
    this.deviceModel = deviceModel;
    this.fingerprint = fingerprint;
    this.deviceFamily = deviceFamily;
    this.carrier = carrier;
    this.imei = imei;
    this.androidId = androidId;
    this.sdkInt = sdkInt;
    this.gaid = gaid;
    this.idfa = idfa;
    this.idfv = idfv;
    this.timezoneId = timezoneId;
    this.timezoneOffset = timezoneOffset;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.osName = osName;
    builder.deviceCountry = deviceCountry;
    builder.localLanguage = localLanguage;
    builder.networkCountry = networkCountry;
    builder.configLanguage = configLanguage;
    builder.osVersion = osVersion;
    builder.deviceVendor = deviceVendor;
    builder.deviceModel = deviceModel;
    builder.fingerprint = fingerprint;
    builder.deviceFamily = deviceFamily;
    builder.carrier = carrier;
    builder.imei = imei;
    builder.androidId = androidId;
    builder.sdkInt = sdkInt;
    builder.gaid = gaid;
    builder.idfa = idfa;
    builder.idfv = idfv;
    builder.timezoneId = timezoneId;
    builder.timezoneOffset = timezoneOffset;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof DeviceInfo)) return false;
    DeviceInfo o = (DeviceInfo) other;
    return unknownFields().equals(o.unknownFields())
        && osName.equals(o.osName)
        && deviceCountry.equals(o.deviceCountry)
        && localLanguage.equals(o.localLanguage)
        && networkCountry.equals(o.networkCountry)
        && configLanguage.equals(o.configLanguage)
        && Internal.equals(osVersion, o.osVersion)
        && Internal.equals(deviceVendor, o.deviceVendor)
        && Internal.equals(deviceModel, o.deviceModel)
        && Internal.equals(fingerprint, o.fingerprint)
        && Internal.equals(deviceFamily, o.deviceFamily)
        && Internal.equals(carrier, o.carrier)
        && Internal.equals(imei, o.imei)
        && Internal.equals(androidId, o.androidId)
        && Internal.equals(sdkInt, o.sdkInt)
        && Internal.equals(gaid, o.gaid)
        && Internal.equals(idfa, o.idfa)
        && Internal.equals(idfv, o.idfv)
        && timezoneId.equals(o.timezoneId)
        && timezoneOffset.equals(o.timezoneOffset);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + osName.hashCode();
      result = result * 37 + deviceCountry.hashCode();
      result = result * 37 + localLanguage.hashCode();
      result = result * 37 + networkCountry.hashCode();
      result = result * 37 + configLanguage.hashCode();
      result = result * 37 + (osVersion != null ? osVersion.hashCode() : 0);
      result = result * 37 + (deviceVendor != null ? deviceVendor.hashCode() : 0);
      result = result * 37 + (deviceModel != null ? deviceModel.hashCode() : 0);
      result = result * 37 + (fingerprint != null ? fingerprint.hashCode() : 0);
      result = result * 37 + (deviceFamily != null ? deviceFamily.hashCode() : 0);
      result = result * 37 + (carrier != null ? carrier.hashCode() : 0);
      result = result * 37 + (imei != null ? imei.hashCode() : 0);
      result = result * 37 + (androidId != null ? androidId.hashCode() : 0);
      result = result * 37 + (sdkInt != null ? sdkInt.hashCode() : 0);
      result = result * 37 + (gaid != null ? gaid.hashCode() : 0);
      result = result * 37 + (idfa != null ? idfa.hashCode() : 0);
      result = result * 37 + (idfv != null ? idfv.hashCode() : 0);
      result = result * 37 + timezoneId.hashCode();
      result = result * 37 + timezoneOffset.hashCode();
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", osName=").append(osName);
    builder.append(", deviceCountry=").append(deviceCountry);
    builder.append(", localLanguage=").append(localLanguage);
    builder.append(", networkCountry=").append(networkCountry);
    builder.append(", configLanguage=").append(configLanguage);
    if (osVersion != null) builder.append(", osVersion=").append(osVersion);
    if (deviceVendor != null) builder.append(", deviceVendor=").append(deviceVendor);
    if (deviceModel != null) builder.append(", deviceModel=").append(deviceModel);
    if (fingerprint != null) builder.append(", fingerprint=").append(fingerprint);
    if (deviceFamily != null) builder.append(", deviceFamily=").append(deviceFamily);
    if (carrier != null) builder.append(", carrier=").append(carrier);
    if (imei != null) builder.append(", imei=").append(imei);
    if (androidId != null) builder.append(", androidId=").append(androidId);
    if (sdkInt != null) builder.append(", sdkInt=").append(sdkInt);
    if (gaid != null) builder.append(", gaid=").append(gaid);
    if (idfa != null) builder.append(", idfa=").append(idfa);
    if (idfv != null) builder.append(", idfv=").append(idfv);
    builder.append(", timezoneId=").append(timezoneId);
    builder.append(", timezoneOffset=").append(timezoneOffset);
    return builder.replace(0, 2, "DeviceInfo{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<DeviceInfo, Builder> {
    public String osName;

    public String deviceCountry;

    public String localLanguage;

    public String networkCountry;

    public String configLanguage;

    public String osVersion;

    public String deviceVendor;

    public String deviceModel;

    public String fingerprint;

    public String deviceFamily;

    public String carrier;

    public String imei;

    public String androidId;

    public Integer sdkInt;

    public String gaid;

    public String idfa;

    public String idfv;

    public String timezoneId;

    public Integer timezoneOffset;

    public Builder() {
    }

    /**
     * ios/android，标示客户端类型:
     */
    public Builder osName(String osName) {
      this.osName = osName;
      return this;
    }

    /**
     * 本机设备：CN、US、CA……
     */
    public Builder deviceCountry(String deviceCountry) {
      this.deviceCountry = deviceCountry;
      return this;
    }

    /**
     * 本机设备：CN、US、CA……
     */
    public Builder localLanguage(String localLanguage) {
      this.localLanguage = localLanguage;
      return this;
    }

    /**
     * 本机设备：CN、US、CA……
     */
    public Builder networkCountry(String networkCountry) {
      this.networkCountry = networkCountry;
      return this;
    }

    /**
     * 本机设备：CN、US、CA……
     */
    public Builder configLanguage(String configLanguage) {
      this.configLanguage = configLanguage;
      return this;
    }

    /**
     * 9.0/6.0
     */
    public Builder osVersion(String osVersion) {
      this.osVersion = osVersion;
      return this;
    }

    /**
     * 本机设备：供应商
     */
    public Builder deviceVendor(String deviceVendor) {
      this.deviceVendor = deviceVendor;
      return this;
    }

    /**
     * 本机设备：型号:iphone 6s/LGE
     */
    public Builder deviceModel(String deviceModel) {
      this.deviceModel = deviceModel;
      return this;
    }

    /**
     * 本机设备：指纹
     */
    public Builder fingerprint(String fingerprint) {
      this.fingerprint = fingerprint;
      return this;
    }

    /**
     * ipad
     */
    public Builder deviceFamily(String deviceFamily) {
      this.deviceFamily = deviceFamily;
      return this;
    }

    /**
     * china mobile
     */
    public Builder carrier(String carrier) {
      this.carrier = carrier;
      return this;
    }

    /**
     * sha1(imei)(android必有)
     */
    public Builder imei(String imei) {
      this.imei = imei;
      return this;
    }

    /**
     * 本机设备：androidId(没有的androidId时候,hash(imei))(android必有)
     */
    public Builder androidId(String androidId) {
      this.androidId = androidId;
      return this;
    }

    /**
     * 本机设备：SDK版本信息(android仅有)
     */
    public Builder sdkInt(Integer sdkInt) {
      this.sdkInt = sdkInt;
      return this;
    }

    public Builder gaid(String gaid) {
      this.gaid = gaid;
      return this;
    }

    /**
     * 00000000-0000-0000-0000-000000000000(ios 仅有)
     */
    public Builder idfa(String idfa) {
      this.idfa = idfa;
      return this;
    }

    /**
     * idfvXXXXXXX(ios 必有)
     */
    public Builder idfv(String idfv) {
      this.idfv = idfv;
      return this;
    }

    /**
     * 时区id
     */
    public Builder timezoneId(String timezoneId) {
      this.timezoneId = timezoneId;
      return this;
    }

    /**
     * 时区相对GMT偏移值
     */
    public Builder timezoneOffset(Integer timezoneOffset) {
      this.timezoneOffset = timezoneOffset;
      return this;
    }

    @Override
    public DeviceInfo build() {
      if (osName == null
          || deviceCountry == null
          || localLanguage == null
          || networkCountry == null
          || configLanguage == null
          || timezoneId == null
          || timezoneOffset == null) {
        throw Internal.missingRequiredFields(osName, "osName",
            deviceCountry, "deviceCountry",
            localLanguage, "localLanguage",
            networkCountry, "networkCountry",
            configLanguage, "configLanguage",
            timezoneId, "timezoneId",
            timezoneOffset, "timezoneOffset");
      }
      return new DeviceInfo(osName, deviceCountry, localLanguage, networkCountry, configLanguage, osVersion, deviceVendor, deviceModel, fingerprint, deviceFamily, carrier, imei, androidId, sdkInt, gaid, idfa, idfv, timezoneId, timezoneOffset, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_DeviceInfo extends ProtoAdapter<DeviceInfo> {
    ProtoAdapter_DeviceInfo() {
      super(FieldEncoding.LENGTH_DELIMITED, DeviceInfo.class);
    }

    @Override
    public int encodedSize(DeviceInfo value) {
      return ProtoAdapter.STRING.encodedSizeWithTag(1, value.osName)
          + ProtoAdapter.STRING.encodedSizeWithTag(2, value.deviceCountry)
          + ProtoAdapter.STRING.encodedSizeWithTag(3, value.localLanguage)
          + ProtoAdapter.STRING.encodedSizeWithTag(4, value.networkCountry)
          + ProtoAdapter.STRING.encodedSizeWithTag(5, value.configLanguage)
          + (value.osVersion != null ? ProtoAdapter.STRING.encodedSizeWithTag(6, value.osVersion) : 0)
          + (value.deviceVendor != null ? ProtoAdapter.STRING.encodedSizeWithTag(7, value.deviceVendor) : 0)
          + (value.deviceModel != null ? ProtoAdapter.STRING.encodedSizeWithTag(8, value.deviceModel) : 0)
          + (value.fingerprint != null ? ProtoAdapter.STRING.encodedSizeWithTag(9, value.fingerprint) : 0)
          + (value.deviceFamily != null ? ProtoAdapter.STRING.encodedSizeWithTag(10, value.deviceFamily) : 0)
          + (value.carrier != null ? ProtoAdapter.STRING.encodedSizeWithTag(11, value.carrier) : 0)
          + (value.imei != null ? ProtoAdapter.STRING.encodedSizeWithTag(12, value.imei) : 0)
          + (value.androidId != null ? ProtoAdapter.STRING.encodedSizeWithTag(13, value.androidId) : 0)
          + (value.sdkInt != null ? ProtoAdapter.INT32.encodedSizeWithTag(14, value.sdkInt) : 0)
          + (value.gaid != null ? ProtoAdapter.STRING.encodedSizeWithTag(15, value.gaid) : 0)
          + (value.idfa != null ? ProtoAdapter.STRING.encodedSizeWithTag(16, value.idfa) : 0)
          + (value.idfv != null ? ProtoAdapter.STRING.encodedSizeWithTag(17, value.idfv) : 0)
          + ProtoAdapter.STRING.encodedSizeWithTag(18, value.timezoneId)
          + ProtoAdapter.INT32.encodedSizeWithTag(19, value.timezoneOffset)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, DeviceInfo value) throws IOException {
      ProtoAdapter.STRING.encodeWithTag(writer, 1, value.osName);
      ProtoAdapter.STRING.encodeWithTag(writer, 2, value.deviceCountry);
      ProtoAdapter.STRING.encodeWithTag(writer, 3, value.localLanguage);
      ProtoAdapter.STRING.encodeWithTag(writer, 4, value.networkCountry);
      ProtoAdapter.STRING.encodeWithTag(writer, 5, value.configLanguage);
      if (value.osVersion != null) ProtoAdapter.STRING.encodeWithTag(writer, 6, value.osVersion);
      if (value.deviceVendor != null) ProtoAdapter.STRING.encodeWithTag(writer, 7, value.deviceVendor);
      if (value.deviceModel != null) ProtoAdapter.STRING.encodeWithTag(writer, 8, value.deviceModel);
      if (value.fingerprint != null) ProtoAdapter.STRING.encodeWithTag(writer, 9, value.fingerprint);
      if (value.deviceFamily != null) ProtoAdapter.STRING.encodeWithTag(writer, 10, value.deviceFamily);
      if (value.carrier != null) ProtoAdapter.STRING.encodeWithTag(writer, 11, value.carrier);
      if (value.imei != null) ProtoAdapter.STRING.encodeWithTag(writer, 12, value.imei);
      if (value.androidId != null) ProtoAdapter.STRING.encodeWithTag(writer, 13, value.androidId);
      if (value.sdkInt != null) ProtoAdapter.INT32.encodeWithTag(writer, 14, value.sdkInt);
      if (value.gaid != null) ProtoAdapter.STRING.encodeWithTag(writer, 15, value.gaid);
      if (value.idfa != null) ProtoAdapter.STRING.encodeWithTag(writer, 16, value.idfa);
      if (value.idfv != null) ProtoAdapter.STRING.encodeWithTag(writer, 17, value.idfv);
      ProtoAdapter.STRING.encodeWithTag(writer, 18, value.timezoneId);
      ProtoAdapter.INT32.encodeWithTag(writer, 19, value.timezoneOffset);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public DeviceInfo decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.osName(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.deviceCountry(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.localLanguage(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.networkCountry(ProtoAdapter.STRING.decode(reader)); break;
          case 5: builder.configLanguage(ProtoAdapter.STRING.decode(reader)); break;
          case 6: builder.osVersion(ProtoAdapter.STRING.decode(reader)); break;
          case 7: builder.deviceVendor(ProtoAdapter.STRING.decode(reader)); break;
          case 8: builder.deviceModel(ProtoAdapter.STRING.decode(reader)); break;
          case 9: builder.fingerprint(ProtoAdapter.STRING.decode(reader)); break;
          case 10: builder.deviceFamily(ProtoAdapter.STRING.decode(reader)); break;
          case 11: builder.carrier(ProtoAdapter.STRING.decode(reader)); break;
          case 12: builder.imei(ProtoAdapter.STRING.decode(reader)); break;
          case 13: builder.androidId(ProtoAdapter.STRING.decode(reader)); break;
          case 14: builder.sdkInt(ProtoAdapter.INT32.decode(reader)); break;
          case 15: builder.gaid(ProtoAdapter.STRING.decode(reader)); break;
          case 16: builder.idfa(ProtoAdapter.STRING.decode(reader)); break;
          case 17: builder.idfv(ProtoAdapter.STRING.decode(reader)); break;
          case 18: builder.timezoneId(ProtoAdapter.STRING.decode(reader)); break;
          case 19: builder.timezoneOffset(ProtoAdapter.INT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public DeviceInfo redact(DeviceInfo value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
