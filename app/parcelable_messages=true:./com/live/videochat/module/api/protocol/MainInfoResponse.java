// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: VCProto.proto at 165:1
package com.live.videochat.module.api.protocol;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

public final class MainInfoResponse extends Message<MainInfoResponse, MainInfoResponse.Builder> {
  public static final ProtoAdapter<MainInfoResponse> ADAPTER = new ProtoAdapter_MainInfoResponse();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_STATUS = 0;

  public static final Integer DEFAULT_TTL = 0;

  public static final String DEFAULT_CLIENTIP = "";

  public static final Integer DEFAULT_FREEMSGS = 0;

  public static final Long DEFAULT_SERVERTIME = 0L;

  public static final String DEFAULT_PUBLICKEYMD5 = "";

  public static final String DEFAULT_GUIDEVIDEOURL = "";

  /**
   * 返回状态:1：成功;-1：错误;
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#INT32",
      label = WireField.Label.REQUIRED
  )
  public final Integer status;

  /**
   * 缓存周期,默认120分钟（单位分钟）
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer ttl;

  /**
   * 客户端IP
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String clientIp;

  /**
   * 普通用户每日免费消息条数
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer freeMsgs;

  /**
   * 当前服务端时间戳(单位毫秒)(UTC时区)
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long serverTime;

  /**
   * 根据许可密钥生成的md5值，用于校验本地许可密钥是否合法；
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String publicKeyMd5;

  /**
   * 新手引导视频地址
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String guideVideoUrl;

  /**
   * 视频聊天中自动上报用户端视频截图
   */
  @WireField(
      tag = 8,
      adapter = "com.live.videochat.module.api.protocol.AutoReport#ADAPTER"
  )
  public final AutoReport autoReport;

  @WireField(
      tag = 9,
      adapter = "com.live.videochat.module.api.protocol.AccountInfo#ADAPTER"
  )
  public final AccountInfo accountInfo;

  /**
   * 应用市场商品信息
   */
  @WireField(
      tag = 10,
      adapter = "com.live.videochat.module.api.protocol.IabSku#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<IabSku> iabSkus;

  /**
   * 虚拟商品信息
   */
  @WireField(
      tag = 11,
      adapter = "com.live.videochat.module.api.protocol.PropCategory#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<PropCategory> propCategories;

  /**
   * 素材信息(贴纸,表情)
   */
  @WireField(
      tag = 12,
      adapter = "com.live.videochat.module.api.protocol.MaterialCategory#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<MaterialCategory> materialCategories;

  public MainInfoResponse(Integer status, Integer ttl, String clientIp, Integer freeMsgs, Long serverTime, String publicKeyMd5, String guideVideoUrl, AutoReport autoReport, AccountInfo accountInfo, List<IabSku> iabSkus, List<PropCategory> propCategories, List<MaterialCategory> materialCategories) {
    this(status, ttl, clientIp, freeMsgs, serverTime, publicKeyMd5, guideVideoUrl, autoReport, accountInfo, iabSkus, propCategories, materialCategories, ByteString.EMPTY);
  }

  public MainInfoResponse(Integer status, Integer ttl, String clientIp, Integer freeMsgs, Long serverTime, String publicKeyMd5, String guideVideoUrl, AutoReport autoReport, AccountInfo accountInfo, List<IabSku> iabSkus, List<PropCategory> propCategories, List<MaterialCategory> materialCategories, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.status = status;
    this.ttl = ttl;
    this.clientIp = clientIp;
    this.freeMsgs = freeMsgs;
    this.serverTime = serverTime;
    this.publicKeyMd5 = publicKeyMd5;
    this.guideVideoUrl = guideVideoUrl;
    this.autoReport = autoReport;
    this.accountInfo = accountInfo;
    this.iabSkus = Internal.immutableCopyOf("iabSkus", iabSkus);
    this.propCategories = Internal.immutableCopyOf("propCategories", propCategories);
    this.materialCategories = Internal.immutableCopyOf("materialCategories", materialCategories);
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.status = status;
    builder.ttl = ttl;
    builder.clientIp = clientIp;
    builder.freeMsgs = freeMsgs;
    builder.serverTime = serverTime;
    builder.publicKeyMd5 = publicKeyMd5;
    builder.guideVideoUrl = guideVideoUrl;
    builder.autoReport = autoReport;
    builder.accountInfo = accountInfo;
    builder.iabSkus = Internal.copyOf("iabSkus", iabSkus);
    builder.propCategories = Internal.copyOf("propCategories", propCategories);
    builder.materialCategories = Internal.copyOf("materialCategories", materialCategories);
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof MainInfoResponse)) return false;
    MainInfoResponse o = (MainInfoResponse) other;
    return unknownFields().equals(o.unknownFields())
        && status.equals(o.status)
        && Internal.equals(ttl, o.ttl)
        && Internal.equals(clientIp, o.clientIp)
        && Internal.equals(freeMsgs, o.freeMsgs)
        && Internal.equals(serverTime, o.serverTime)
        && Internal.equals(publicKeyMd5, o.publicKeyMd5)
        && Internal.equals(guideVideoUrl, o.guideVideoUrl)
        && Internal.equals(autoReport, o.autoReport)
        && Internal.equals(accountInfo, o.accountInfo)
        && iabSkus.equals(o.iabSkus)
        && propCategories.equals(o.propCategories)
        && materialCategories.equals(o.materialCategories);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + status.hashCode();
      result = result * 37 + (ttl != null ? ttl.hashCode() : 0);
      result = result * 37 + (clientIp != null ? clientIp.hashCode() : 0);
      result = result * 37 + (freeMsgs != null ? freeMsgs.hashCode() : 0);
      result = result * 37 + (serverTime != null ? serverTime.hashCode() : 0);
      result = result * 37 + (publicKeyMd5 != null ? publicKeyMd5.hashCode() : 0);
      result = result * 37 + (guideVideoUrl != null ? guideVideoUrl.hashCode() : 0);
      result = result * 37 + (autoReport != null ? autoReport.hashCode() : 0);
      result = result * 37 + (accountInfo != null ? accountInfo.hashCode() : 0);
      result = result * 37 + iabSkus.hashCode();
      result = result * 37 + propCategories.hashCode();
      result = result * 37 + materialCategories.hashCode();
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", status=").append(status);
    if (ttl != null) builder.append(", ttl=").append(ttl);
    if (clientIp != null) builder.append(", clientIp=").append(clientIp);
    if (freeMsgs != null) builder.append(", freeMsgs=").append(freeMsgs);
    if (serverTime != null) builder.append(", serverTime=").append(serverTime);
    if (publicKeyMd5 != null) builder.append(", publicKeyMd5=").append(publicKeyMd5);
    if (guideVideoUrl != null) builder.append(", guideVideoUrl=").append(guideVideoUrl);
    if (autoReport != null) builder.append(", autoReport=").append(autoReport);
    if (accountInfo != null) builder.append(", accountInfo=").append(accountInfo);
    if (!iabSkus.isEmpty()) builder.append(", iabSkus=").append(iabSkus);
    if (!propCategories.isEmpty()) builder.append(", propCategories=").append(propCategories);
    if (!materialCategories.isEmpty()) builder.append(", materialCategories=").append(materialCategories);
    return builder.replace(0, 2, "MainInfoResponse{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<MainInfoResponse, Builder> {
    public Integer status;

    public Integer ttl;

    public String clientIp;

    public Integer freeMsgs;

    public Long serverTime;

    public String publicKeyMd5;

    public String guideVideoUrl;

    public AutoReport autoReport;

    public AccountInfo accountInfo;

    public List<IabSku> iabSkus;

    public List<PropCategory> propCategories;

    public List<MaterialCategory> materialCategories;

    public Builder() {
      iabSkus = Internal.newMutableList();
      propCategories = Internal.newMutableList();
      materialCategories = Internal.newMutableList();
    }

    /**
     * 返回状态:1：成功;-1：错误;
     */
    public Builder status(Integer status) {
      this.status = status;
      return this;
    }

    /**
     * 缓存周期,默认120分钟（单位分钟）
     */
    public Builder ttl(Integer ttl) {
      this.ttl = ttl;
      return this;
    }

    /**
     * 客户端IP
     */
    public Builder clientIp(String clientIp) {
      this.clientIp = clientIp;
      return this;
    }

    /**
     * 普通用户每日免费消息条数
     */
    public Builder freeMsgs(Integer freeMsgs) {
      this.freeMsgs = freeMsgs;
      return this;
    }

    /**
     * 当前服务端时间戳(单位毫秒)(UTC时区)
     */
    public Builder serverTime(Long serverTime) {
      this.serverTime = serverTime;
      return this;
    }

    /**
     * 根据许可密钥生成的md5值，用于校验本地许可密钥是否合法；
     */
    public Builder publicKeyMd5(String publicKeyMd5) {
      this.publicKeyMd5 = publicKeyMd5;
      return this;
    }

    /**
     * 新手引导视频地址
     */
    public Builder guideVideoUrl(String guideVideoUrl) {
      this.guideVideoUrl = guideVideoUrl;
      return this;
    }

    /**
     * 视频聊天中自动上报用户端视频截图
     */
    public Builder autoReport(AutoReport autoReport) {
      this.autoReport = autoReport;
      return this;
    }

    public Builder accountInfo(AccountInfo accountInfo) {
      this.accountInfo = accountInfo;
      return this;
    }

    /**
     * 应用市场商品信息
     */
    public Builder iabSkus(List<IabSku> iabSkus) {
      Internal.checkElementsNotNull(iabSkus);
      this.iabSkus = iabSkus;
      return this;
    }

    /**
     * 虚拟商品信息
     */
    public Builder propCategories(List<PropCategory> propCategories) {
      Internal.checkElementsNotNull(propCategories);
      this.propCategories = propCategories;
      return this;
    }

    /**
     * 素材信息(贴纸,表情)
     */
    public Builder materialCategories(List<MaterialCategory> materialCategories) {
      Internal.checkElementsNotNull(materialCategories);
      this.materialCategories = materialCategories;
      return this;
    }

    @Override
    public MainInfoResponse build() {
      if (status == null) {
        throw Internal.missingRequiredFields(status, "status");
      }
      return new MainInfoResponse(status, ttl, clientIp, freeMsgs, serverTime, publicKeyMd5, guideVideoUrl, autoReport, accountInfo, iabSkus, propCategories, materialCategories, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_MainInfoResponse extends ProtoAdapter<MainInfoResponse> {
    ProtoAdapter_MainInfoResponse() {
      super(FieldEncoding.LENGTH_DELIMITED, MainInfoResponse.class);
    }

    @Override
    public int encodedSize(MainInfoResponse value) {
      return ProtoAdapter.INT32.encodedSizeWithTag(1, value.status)
          + (value.ttl != null ? ProtoAdapter.INT32.encodedSizeWithTag(2, value.ttl) : 0)
          + (value.clientIp != null ? ProtoAdapter.STRING.encodedSizeWithTag(3, value.clientIp) : 0)
          + (value.freeMsgs != null ? ProtoAdapter.INT32.encodedSizeWithTag(4, value.freeMsgs) : 0)
          + (value.serverTime != null ? ProtoAdapter.INT64.encodedSizeWithTag(5, value.serverTime) : 0)
          + (value.publicKeyMd5 != null ? ProtoAdapter.STRING.encodedSizeWithTag(6, value.publicKeyMd5) : 0)
          + (value.guideVideoUrl != null ? ProtoAdapter.STRING.encodedSizeWithTag(7, value.guideVideoUrl) : 0)
          + (value.autoReport != null ? AutoReport.ADAPTER.encodedSizeWithTag(8, value.autoReport) : 0)
          + (value.accountInfo != null ? AccountInfo.ADAPTER.encodedSizeWithTag(9, value.accountInfo) : 0)
          + IabSku.ADAPTER.asRepeated().encodedSizeWithTag(10, value.iabSkus)
          + PropCategory.ADAPTER.asRepeated().encodedSizeWithTag(11, value.propCategories)
          + MaterialCategory.ADAPTER.asRepeated().encodedSizeWithTag(12, value.materialCategories)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, MainInfoResponse value) throws IOException {
      ProtoAdapter.INT32.encodeWithTag(writer, 1, value.status);
      if (value.ttl != null) ProtoAdapter.INT32.encodeWithTag(writer, 2, value.ttl);
      if (value.clientIp != null) ProtoAdapter.STRING.encodeWithTag(writer, 3, value.clientIp);
      if (value.freeMsgs != null) ProtoAdapter.INT32.encodeWithTag(writer, 4, value.freeMsgs);
      if (value.serverTime != null) ProtoAdapter.INT64.encodeWithTag(writer, 5, value.serverTime);
      if (value.publicKeyMd5 != null) ProtoAdapter.STRING.encodeWithTag(writer, 6, value.publicKeyMd5);
      if (value.guideVideoUrl != null) ProtoAdapter.STRING.encodeWithTag(writer, 7, value.guideVideoUrl);
      if (value.autoReport != null) AutoReport.ADAPTER.encodeWithTag(writer, 8, value.autoReport);
      if (value.accountInfo != null) AccountInfo.ADAPTER.encodeWithTag(writer, 9, value.accountInfo);
      IabSku.ADAPTER.asRepeated().encodeWithTag(writer, 10, value.iabSkus);
      PropCategory.ADAPTER.asRepeated().encodeWithTag(writer, 11, value.propCategories);
      MaterialCategory.ADAPTER.asRepeated().encodeWithTag(writer, 12, value.materialCategories);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public MainInfoResponse decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.status(ProtoAdapter.INT32.decode(reader)); break;
          case 2: builder.ttl(ProtoAdapter.INT32.decode(reader)); break;
          case 3: builder.clientIp(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.freeMsgs(ProtoAdapter.INT32.decode(reader)); break;
          case 5: builder.serverTime(ProtoAdapter.INT64.decode(reader)); break;
          case 6: builder.publicKeyMd5(ProtoAdapter.STRING.decode(reader)); break;
          case 7: builder.guideVideoUrl(ProtoAdapter.STRING.decode(reader)); break;
          case 8: builder.autoReport(AutoReport.ADAPTER.decode(reader)); break;
          case 9: builder.accountInfo(AccountInfo.ADAPTER.decode(reader)); break;
          case 10: builder.iabSkus.add(IabSku.ADAPTER.decode(reader)); break;
          case 11: builder.propCategories.add(PropCategory.ADAPTER.decode(reader)); break;
          case 12: builder.materialCategories.add(MaterialCategory.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public MainInfoResponse redact(MainInfoResponse value) {
      Builder builder = value.newBuilder();
      if (builder.autoReport != null) builder.autoReport = AutoReport.ADAPTER.redact(builder.autoReport);
      if (builder.accountInfo != null) builder.accountInfo = AccountInfo.ADAPTER.redact(builder.accountInfo);
      Internal.redactElements(builder.iabSkus, IabSku.ADAPTER);
      Internal.redactElements(builder.propCategories, PropCategory.ADAPTER);
      Internal.redactElements(builder.materialCategories, MaterialCategory.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
