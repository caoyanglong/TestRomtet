// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: VCProto.proto at 133:1
package com.live.videochat.module.api.protocol;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * 响应
 */
public final class CheckRegisterResponse extends Message<CheckRegisterResponse, CheckRegisterResponse.Builder> {
  public static final ProtoAdapter<CheckRegisterResponse> ADAPTER = new ProtoAdapter_CheckRegisterResponse();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_STATUS = 0;

  public static final Boolean DEFAULT_HASREGISTER = false;

  /**
   * 返回状态:1：成功;-1：错误;
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#INT32",
      label = WireField.Label.REQUIRED
  )
  public final Integer status;

  /**
   * true:已经注册;false:未注册.
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean hasRegister;

  /**
   * 用户信息（jid, vcToken, vChatId）若已经注册，则直接返回该用户的信息．避免再次调用登录接口,若未注册,则返回空.
   */
  @WireField(
      tag = 3,
      adapter = "com.live.videochat.module.api.protocol.UserInfo#ADAPTER"
  )
  public final UserInfo userInfo;

  /**
   * xmpp各组件的信息
   */
  @WireField(
      tag = 4,
      adapter = "com.live.videochat.module.api.protocol.ComponentInfo#ADAPTER"
  )
  public final ComponentInfo componentInfo;

  public CheckRegisterResponse(Integer status, Boolean hasRegister, UserInfo userInfo, ComponentInfo componentInfo) {
    this(status, hasRegister, userInfo, componentInfo, ByteString.EMPTY);
  }

  public CheckRegisterResponse(Integer status, Boolean hasRegister, UserInfo userInfo, ComponentInfo componentInfo, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.status = status;
    this.hasRegister = hasRegister;
    this.userInfo = userInfo;
    this.componentInfo = componentInfo;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.status = status;
    builder.hasRegister = hasRegister;
    builder.userInfo = userInfo;
    builder.componentInfo = componentInfo;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof CheckRegisterResponse)) return false;
    CheckRegisterResponse o = (CheckRegisterResponse) other;
    return unknownFields().equals(o.unknownFields())
        && status.equals(o.status)
        && Internal.equals(hasRegister, o.hasRegister)
        && Internal.equals(userInfo, o.userInfo)
        && Internal.equals(componentInfo, o.componentInfo);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + status.hashCode();
      result = result * 37 + (hasRegister != null ? hasRegister.hashCode() : 0);
      result = result * 37 + (userInfo != null ? userInfo.hashCode() : 0);
      result = result * 37 + (componentInfo != null ? componentInfo.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", status=").append(status);
    if (hasRegister != null) builder.append(", hasRegister=").append(hasRegister);
    if (userInfo != null) builder.append(", userInfo=").append(userInfo);
    if (componentInfo != null) builder.append(", componentInfo=").append(componentInfo);
    return builder.replace(0, 2, "CheckRegisterResponse{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<CheckRegisterResponse, Builder> {
    public Integer status;

    public Boolean hasRegister;

    public UserInfo userInfo;

    public ComponentInfo componentInfo;

    public Builder() {
    }

    /**
     * 返回状态:1：成功;-1：错误;
     */
    public Builder status(Integer status) {
      this.status = status;
      return this;
    }

    /**
     * true:已经注册;false:未注册.
     */
    public Builder hasRegister(Boolean hasRegister) {
      this.hasRegister = hasRegister;
      return this;
    }

    /**
     * 用户信息（jid, vcToken, vChatId）若已经注册，则直接返回该用户的信息．避免再次调用登录接口,若未注册,则返回空.
     */
    public Builder userInfo(UserInfo userInfo) {
      this.userInfo = userInfo;
      return this;
    }

    /**
     * xmpp各组件的信息
     */
    public Builder componentInfo(ComponentInfo componentInfo) {
      this.componentInfo = componentInfo;
      return this;
    }

    @Override
    public CheckRegisterResponse build() {
      if (status == null) {
        throw Internal.missingRequiredFields(status, "status");
      }
      return new CheckRegisterResponse(status, hasRegister, userInfo, componentInfo, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_CheckRegisterResponse extends ProtoAdapter<CheckRegisterResponse> {
    ProtoAdapter_CheckRegisterResponse() {
      super(FieldEncoding.LENGTH_DELIMITED, CheckRegisterResponse.class);
    }

    @Override
    public int encodedSize(CheckRegisterResponse value) {
      return ProtoAdapter.INT32.encodedSizeWithTag(1, value.status)
          + (value.hasRegister != null ? ProtoAdapter.BOOL.encodedSizeWithTag(2, value.hasRegister) : 0)
          + (value.userInfo != null ? UserInfo.ADAPTER.encodedSizeWithTag(3, value.userInfo) : 0)
          + (value.componentInfo != null ? ComponentInfo.ADAPTER.encodedSizeWithTag(4, value.componentInfo) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, CheckRegisterResponse value) throws IOException {
      ProtoAdapter.INT32.encodeWithTag(writer, 1, value.status);
      if (value.hasRegister != null) ProtoAdapter.BOOL.encodeWithTag(writer, 2, value.hasRegister);
      if (value.userInfo != null) UserInfo.ADAPTER.encodeWithTag(writer, 3, value.userInfo);
      if (value.componentInfo != null) ComponentInfo.ADAPTER.encodeWithTag(writer, 4, value.componentInfo);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public CheckRegisterResponse decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.status(ProtoAdapter.INT32.decode(reader)); break;
          case 2: builder.hasRegister(ProtoAdapter.BOOL.decode(reader)); break;
          case 3: builder.userInfo(UserInfo.ADAPTER.decode(reader)); break;
          case 4: builder.componentInfo(ComponentInfo.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public CheckRegisterResponse redact(CheckRegisterResponse value) {
      Builder builder = value.newBuilder();
      if (builder.userInfo != null) builder.userInfo = UserInfo.ADAPTER.redact(builder.userInfo);
      if (builder.componentInfo != null) builder.componentInfo = ComponentInfo.ADAPTER.redact(builder.componentInfo);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
